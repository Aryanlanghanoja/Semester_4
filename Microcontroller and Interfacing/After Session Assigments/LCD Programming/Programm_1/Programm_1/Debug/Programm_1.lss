
Programm_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000895  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000360  00000000  00000000  000011c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000294  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  7a:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
#include <util/delay.h>

#define F_CPU 1000000UL

void LCD_Command(unsigned char Command) {
	PORTB = Command;
  82:	88 bb       	out	0x18, r24	; 24
	PORTC &= ~(0x01);
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(0x02);
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	85 bb       	out	0x15, r24	; 21
	PORTC |= (0x04);
  90:	85 b3       	in	r24, 0x15	; 21
  92:	84 60       	ori	r24, 0x04	; 4
  94:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Command+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Command+0x1e>
  a0:	00 00       	nop
	_delay_ms(1); // Increased delay for commands
	PORTC &= ~(0x04);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	08 95       	ret

000000aa <LCD_Data>:
}

void LCD_Data(unsigned char Data) {
	PORTB = Data;
  aa:	88 bb       	out	0x18, r24	; 24
	PORTC |= (0x01);
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(0x02);
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	85 bb       	out	0x15, r24	; 21
	PORTC |= (0x04);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 bb       	out	0x15, r24	; 21
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Data+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_Data+0x1e>
  c8:	00 00       	nop
	_delay_ms(1); // Increased delay for data
	PORTC &= ~(0x04);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	08 95       	ret

000000d2 <LCD_Init>:
  d2:	83 ed       	ldi	r24, 0xD3	; 211
  d4:	90 e3       	ldi	r25, 0x30	; 48
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_Init+0x4>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Init+0xa>
  dc:	00 00       	nop
}

void LCD_Init() {
	_delay_ms(50); // wait for LCD to power up
	LCD_Command(0x38); // Initialize 8-bit mode
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0C); // Display ON, Cursor OFF
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x06); // Increment cursor
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x01); // Clear LCD
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  f6:	83 ef       	ldi	r24, 0xF3	; 243
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Init+0x28>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Init+0x2e>
 100:	00 00       	nop
	_delay_ms(2); // Delay for LCD to clear
	LCD_Command(0x80); // Move cursor to beginning of first line
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 108:	08 95       	ret

0000010a <LCD_SetCursor>:
}

void LCD_SetCursor(uint8_t row, uint8_t column) {
	uint8_t position = 0x80; // Base address for the first line

	if (row == 1) // If second row
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	11 f0       	breq	.+4      	; 0x112 <LCD_SetCursor+0x8>
	_delay_ms(2); // Delay for LCD to clear
	LCD_Command(0x80); // Move cursor to beginning of first line
}

void LCD_SetCursor(uint8_t row, uint8_t column) {
	uint8_t position = 0x80; // Base address for the first line
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	01 c0       	rjmp	.+2      	; 0x114 <LCD_SetCursor+0xa>

	if (row == 1) // If second row
	position = 0xC0; // Base address for the second line
 112:	80 ec       	ldi	r24, 0xC0	; 192

	position += column - 1; // Adjust position for the desired column
 114:	86 0f       	add	r24, r22
	LCD_Command(position); // Set cursor position
 116:	81 50       	subi	r24, 0x01	; 1
 118:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 11c:	08 95       	ret

0000011e <main>:
}

int main(void) {
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	2f 97       	sbiw	r28, 0x0f	; 15
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 136:	84 bb       	out	0x14, r24	; 20
	LCD_Init(); 
 138:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Init>
    char First_Name[5] = "ARYAN";
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	e0 e6       	ldi	r30, 0x60	; 96
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	de 01       	movw	r26, r28
 144:	11 96       	adiw	r26, 0x01	; 1
 146:	01 90       	ld	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	8a 95       	dec	r24
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x28>
    char Last_Name[10] = "LANGHANOJA";
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	e6 e6       	ldi	r30, 0x66	; 102
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	de 01       	movw	r26, r28
 156:	16 96       	adiw	r26, 0x06	; 6
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	8a 95       	dec	r24
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x3a>
	
	LCD_SetCursor(0, 5);
 160:	65 e0       	ldi	r22, 0x05	; 5
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_SetCursor>
    for (int i = 0; i < 5; i++) {
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	0b c0       	rjmp	.+22     	; 0x184 <main+0x66>
		LCD_Data(First_Name[i]);
 16e:	e1 e0       	ldi	r30, 0x01	; 1
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ec 0f       	add	r30, r28
 174:	fd 1f       	adc	r31, r29
 176:	e0 0f       	add	r30, r16
 178:	f1 1f       	adc	r31, r17
 17a:	80 81       	ld	r24, Z
 17c:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_Data>
	LCD_Init(); 
    char First_Name[5] = "ARYAN";
    char Last_Name[10] = "LANGHANOJA";
	
	LCD_SetCursor(0, 5);
    for (int i = 0; i < 5; i++) {
 180:	0f 5f       	subi	r16, 0xFF	; 255
 182:	1f 4f       	sbci	r17, 0xFF	; 255
 184:	05 30       	cpi	r16, 0x05	; 5
 186:	11 05       	cpc	r17, r1
 188:	94 f3       	brlt	.-28     	; 0x16e <main+0x50>
		LCD_Data(First_Name[i]);
    }

	LCD_SetCursor(1, 3);
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_SetCursor>
    for (int i = 0; i < 10; i++) {
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	0b c0       	rjmp	.+22     	; 0x1ae <main+0x90>
		LCD_Data(Last_Name[i]);
 198:	e6 e0       	ldi	r30, 0x06	; 6
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ec 0f       	add	r30, r28
 19e:	fd 1f       	adc	r31, r29
 1a0:	e0 0f       	add	r30, r16
 1a2:	f1 1f       	adc	r31, r17
 1a4:	80 81       	ld	r24, Z
 1a6:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_Data>
    for (int i = 0; i < 5; i++) {
		LCD_Data(First_Name[i]);
    }

	LCD_SetCursor(1, 3);
    for (int i = 0; i < 10; i++) {
 1aa:	0f 5f       	subi	r16, 0xFF	; 255
 1ac:	1f 4f       	sbci	r17, 0xFF	; 255
 1ae:	0a 30       	cpi	r16, 0x0A	; 10
 1b0:	11 05       	cpc	r17, r1
 1b2:	94 f3       	brlt	.-28     	; 0x198 <main+0x7a>
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0x96>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
