
Programm_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000002c2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6f  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  00000f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ac  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000515  00000000  00000000  00001f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  7a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
#define LCD_RS PC0
#define LCD_RW PC1
#define LCD_EN PC2

void LCD_Command(unsigned char Command) {
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (Command & 0xF0);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
	LCD_CTRL_PORT &= ~(1 << LCD_RS); // RS low for command
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	95 bb       	out	0x15, r25	; 21
	LCD_CTRL_PORT &= ~(1 << LCD_RW); // RW low for write
  94:	95 b3       	in	r25, 0x15	; 21
  96:	9d 7f       	andi	r25, 0xFD	; 253
  98:	95 bb       	out	0x15, r25	; 21
	LCD_CTRL_PORT |= (1 << LCD_EN); // Enable high
  9a:	95 b3       	in	r25, 0x15	; 21
  9c:	94 60       	ori	r25, 0x04	; 4
  9e:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	00 00       	nop
	_delay_us(1);
	LCD_CTRL_PORT &= ~(1 << LCD_EN); // Enable low
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	9b 7f       	andi	r25, 0xFB	; 251
  a6:	95 bb       	out	0x15, r25	; 21
  a8:	31 e2       	ldi	r19, 0x21	; 33
  aa:	3a 95       	dec	r19
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_Command+0x28>
  ae:	00 00       	nop
	_delay_us(100);
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((Command << 4) & 0xF0);
  b0:	22 b3       	in	r18, 0x12	; 18
  b2:	30 e1       	ldi	r19, 0x10	; 16
  b4:	83 9f       	mul	r24, r19
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	92 2f       	mov	r25, r18
  bc:	9f 70       	andi	r25, 0x0F	; 15
  be:	89 2b       	or	r24, r25
  c0:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL_PORT |= (1 << LCD_EN); // Enable high
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	00 00       	nop
	_delay_us(1);
	LCD_CTRL_PORT &= ~(1 << LCD_EN); // Enable low
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	83 ef       	ldi	r24, 0xF3	; 243
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Command+0x52>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_Command+0x58>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <LCD_Data>:
	_delay_ms(2);
}

void LCD_Data(unsigned char Data) {
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (Data & 0xF0);
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	28 2f       	mov	r18, r24
  e4:	20 7f       	andi	r18, 0xF0	; 240
  e6:	92 2b       	or	r25, r18
  e8:	92 bb       	out	0x12, r25	; 18
	LCD_CTRL_PORT |= (1 << LCD_RS); // RS high for data
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	91 60       	ori	r25, 0x01	; 1
  ee:	95 bb       	out	0x15, r25	; 21
	LCD_CTRL_PORT &= ~(1 << LCD_RW); // RW low for write
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	9d 7f       	andi	r25, 0xFD	; 253
  f4:	95 bb       	out	0x15, r25	; 21
	LCD_CTRL_PORT |= (1 << LCD_EN); // Enable high
  f6:	95 b3       	in	r25, 0x15	; 21
  f8:	94 60       	ori	r25, 0x04	; 4
  fa:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	00 00       	nop
	_delay_us(1);
	LCD_CTRL_PORT &= ~(1 << LCD_EN); // Enable low
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	9b 7f       	andi	r25, 0xFB	; 251
 102:	95 bb       	out	0x15, r25	; 21
 104:	31 e2       	ldi	r19, 0x21	; 33
 106:	3a 95       	dec	r19
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Data+0x28>
 10a:	00 00       	nop
	_delay_us(100);
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((Data << 4) & 0xF0);
 10c:	22 b3       	in	r18, 0x12	; 18
 10e:	30 e1       	ldi	r19, 0x10	; 16
 110:	83 9f       	mul	r24, r19
 112:	c0 01       	movw	r24, r0
 114:	11 24       	eor	r1, r1
 116:	92 2f       	mov	r25, r18
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	89 2b       	or	r24, r25
 11c:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL_PORT |= (1 << LCD_EN); // Enable high
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	84 60       	ori	r24, 0x04	; 4
 122:	85 bb       	out	0x15, r24	; 21
 124:	00 00       	nop
	_delay_us(1);
	LCD_CTRL_PORT &= ~(1 << LCD_EN); // Enable low
 126:	85 b3       	in	r24, 0x15	; 21
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	83 ef       	ldi	r24, 0xF3	; 243
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_Data+0x52>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Data+0x58>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init(void) {
	LCD_DATA_PORT = 0xFF; // Initialize LCD data port as output
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL_PORT |= (1 << LCD_EN) | (1 << LCD_RW) | (1 << LCD_RS); // Initialize control port pins as output
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	87 60       	ori	r24, 0x07	; 7
 142:	85 bb       	out	0x15, r24	; 21
 144:	87 e8       	ldi	r24, 0x87	; 135
 146:	93 e1       	ldi	r25, 0x13	; 19
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_Init+0xe>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Init+0x14>
 14e:	00 00       	nop
	_delay_ms(20);
	
	LCD_Command(0x33); // Initialization sequence
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x32); // Initialization sequence
 156:	82 e3       	ldi	r24, 0x32	; 50
 158:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x28); // 4-bit mode, 2 lines, 5x8 font
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0C); // Display on, cursor off, blink off
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x06); // Increment cursor
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x01); // Clear display
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 174:	83 ef       	ldi	r24, 0xF3	; 243
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x3e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0x44>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <LCD_Clear>:
	_delay_ms(2);
}

void LCD_Clear(void) {
	LCD_Command(0x01); // Clear display
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 188:	83 ef       	ldi	r24, 0xF3	; 243
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Clear+0xa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Clear+0x10>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <LCD_GotoXY>:
	_delay_ms(2);
}

void LCD_GotoXY(unsigned char x, unsigned char y) {
	unsigned char address = 0;
	if (y == 0) {
 196:	61 11       	cpse	r22, r1
 198:	02 c0       	rjmp	.+4      	; 0x19e <LCD_GotoXY+0x8>
		address = 0x80 + x; // Line 1
 19a:	80 58       	subi	r24, 0x80	; 128
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <LCD_GotoXY+0x12>
		} else if (y == 1) {
 19e:	61 30       	cpi	r22, 0x01	; 1
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <LCD_GotoXY+0x10>
		address = 0xC0 + x; // Line 2
 1a2:	80 54       	subi	r24, 0x40	; 64
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <LCD_GotoXY+0x12>
	LCD_Command(0x01); // Clear display
	_delay_ms(2);
}

void LCD_GotoXY(unsigned char x, unsigned char y) {
	unsigned char address = 0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
		address = 0x80 + x; // Line 1
		} else if (y == 1) {
		address = 0xC0 + x; // Line 2
	}

	LCD_Command(address);
 1a8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1ac:	08 95       	ret

000001ae <LCD_Puts>:
}


void LCD_Puts(const char *str) {
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
	while (*str) {
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCD_Puts+0xe>
		LCD_Data(*str++);
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	0e 94 6f 00 	call	0xde	; 0xde <LCD_Data>
	LCD_Command(address);
}


void LCD_Puts(const char *str) {
	while (*str) {
 1bc:	88 81       	ld	r24, Y
 1be:	81 11       	cpse	r24, r1
 1c0:	fa cf       	rjmp	.-12     	; 0x1b6 <LCD_Puts+0x8>
		LCD_Data(*str++);
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LCD_Scroll_Text>:

void LCD_Scroll_Text(const char *text) {
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
	int len = 0;
 1d0:	e1 2c       	mov	r14, r1
 1d2:	f1 2c       	mov	r15, r1
	while (text[len] != '\0') {
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <LCD_Scroll_Text+0x14>
		len++;
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	e2 1a       	sub	r14, r18
 1da:	f2 0a       	sbc	r15, r18
	}
}

void LCD_Scroll_Text(const char *text) {
	int len = 0;
	while (text[len] != '\0') {
 1dc:	fc 01       	movw	r30, r24
 1de:	ee 0d       	add	r30, r14
 1e0:	ff 1d       	adc	r31, r15
 1e2:	20 81       	ld	r18, Z
 1e4:	21 11       	cpse	r18, r1
 1e6:	f7 cf       	rjmp	.-18     	; 0x1d6 <LCD_Scroll_Text+0xe>
		len++;
	}
	
	// Calculate the starting position
	int start_position = len > 16 ? len - 16 : 0;
 1e8:	31 e1       	ldi	r19, 0x11	; 17
 1ea:	e3 16       	cp	r14, r19
 1ec:	f1 04       	cpc	r15, r1
 1ee:	2c f0       	brlt	.+10     	; 0x1fa <LCD_Scroll_Text+0x32>
 1f0:	67 01       	movw	r12, r14
 1f2:	40 e1       	ldi	r20, 0x10	; 16
 1f4:	c4 1a       	sub	r12, r20
 1f6:	d1 08       	sbc	r13, r1
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <LCD_Scroll_Text+0x36>
 1fa:	c1 2c       	mov	r12, r1
 1fc:	d1 2c       	mov	r13, r1

	// Add spaces at the beginning to adjust the starting position
	char scrolled_text[2 * len + 6]; // Double the length of the text for scrolling effect
 1fe:	97 01       	movw	r18, r14
 200:	2d 5f       	subi	r18, 0xFD	; 253
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	4d b7       	in	r20, 0x3d	; 61
 20a:	5e b7       	in	r21, 0x3e	; 62
 20c:	42 1b       	sub	r20, r18
 20e:	53 0b       	sbc	r21, r19
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	5e bf       	out	0x3e, r21	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	4d bf       	out	0x3d, r20	; 61
 21a:	2d b7       	in	r18, 0x3d	; 61
 21c:	3e b7       	in	r19, 0x3e	; 62
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	59 01       	movw	r10, r18
	for (int i = 0; i < start_position; i++) {
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	07 c0       	rjmp	.+14     	; 0x238 <LCD_Scroll_Text+0x70>
		scrolled_text[i] = ' ';
 22a:	f5 01       	movw	r30, r10
 22c:	e2 0f       	add	r30, r18
 22e:	f3 1f       	adc	r31, r19
 230:	40 e2       	ldi	r20, 0x20	; 32
 232:	40 83       	st	Z, r20
	// Calculate the starting position
	int start_position = len > 16 ? len - 16 : 0;

	// Add spaces at the beginning to adjust the starting position
	char scrolled_text[2 * len + 6]; // Double the length of the text for scrolling effect
	for (int i = 0; i < start_position; i++) {
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	3f 4f       	sbci	r19, 0xFF	; 255
 238:	2c 15       	cp	r18, r12
 23a:	3d 05       	cpc	r19, r13
 23c:	b4 f3       	brlt	.-20     	; 0x22a <LCD_Scroll_Text+0x62>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	0c c0       	rjmp	.+24     	; 0x25c <LCD_Scroll_Text+0x94>
		scrolled_text[i] = ' ';
	}

	// Copy the text to scrolled_text
	for (int i = 0; i < len; i++) {
		scrolled_text[start_position + i] = text[i];
 244:	f9 01       	movw	r30, r18
 246:	ec 0d       	add	r30, r12
 248:	fd 1d       	adc	r31, r13
 24a:	dc 01       	movw	r26, r24
 24c:	a2 0f       	add	r26, r18
 24e:	b3 1f       	adc	r27, r19
 250:	4c 91       	ld	r20, X
 252:	ea 0d       	add	r30, r10
 254:	fb 1d       	adc	r31, r11
 256:	40 83       	st	Z, r20
	for (int i = 0; i < start_position; i++) {
		scrolled_text[i] = ' ';
	}

	// Copy the text to scrolled_text
	for (int i = 0; i < len; i++) {
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	2e 15       	cp	r18, r14
 25e:	3f 05       	cpc	r19, r15
 260:	8c f3       	brlt	.-30     	; 0x244 <LCD_Scroll_Text+0x7c>
		scrolled_text[start_position + i] = text[i];
	}

	while (1) {
		for (int i = 0; i < len + start_position + 3; i++) {
 262:	00 e0       	ldi	r16, 0x00	; 0
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	16 c0       	rjmp	.+44     	; 0x294 <LCD_Scroll_Text+0xcc>
			LCD_Clear();
 268:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Clear>
			LCD_GotoXY(0, 0);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_GotoXY>
			LCD_Puts(scrolled_text + i);
 274:	c5 01       	movw	r24, r10
 276:	80 0f       	add	r24, r16
 278:	91 1f       	adc	r25, r17
 27a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Puts>
 27e:	3f e9       	ldi	r19, 0x9F	; 159
 280:	46 e8       	ldi	r20, 0x86	; 134
 282:	51 e0       	ldi	r21, 0x01	; 1
 284:	31 50       	subi	r19, 0x01	; 1
 286:	40 40       	sbci	r20, 0x00	; 0
 288:	50 40       	sbci	r21, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <LCD_Scroll_Text+0xbc>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_Scroll_Text+0xc6>
 28e:	00 00       	nop
	for (int i = 0; i < len; i++) {
		scrolled_text[start_position + i] = text[i];
	}

	while (1) {
		for (int i = 0; i < len + start_position + 3; i++) {
 290:	0f 5f       	subi	r16, 0xFF	; 255
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	c7 01       	movw	r24, r14
 296:	8c 0d       	add	r24, r12
 298:	9d 1d       	adc	r25, r13
 29a:	03 96       	adiw	r24, 0x03	; 3
 29c:	08 17       	cp	r16, r24
 29e:	19 07       	cpc	r17, r25
 2a0:	1c f3       	brlt	.-58     	; 0x268 <LCD_Scroll_Text+0xa0>
 2a2:	df cf       	rjmp	.-66     	; 0x262 <LCD_Scroll_Text+0x9a>

000002a4 <main>:
	}
}


int main(void) {
	DDRD = 0xFF; // Port D as output
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	81 bb       	out	0x11, r24	; 17
	DDRC |= (1 << LCD_EN) | (1 << LCD_RW) | (1 << LCD_RS); // Control pins as output
 2a8:	84 b3       	in	r24, 0x14	; 20
 2aa:	87 60       	ori	r24, 0x07	; 7
 2ac:	84 bb       	out	0x14, r24	; 20
	
	LCD_Init();
 2ae:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_Init>
	LCD_Clear();
 2b2:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Clear>
	
	LCD_Scroll_Text("HELLO FROM ARYAN LANGHANOJA");
 2b6:	80 e6       	ldi	r24, 0x60	; 96
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Scroll_Text>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
