
Experiment_7_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bdf  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000618  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f4  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c1  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  64:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcdcmd>:

unsigned char keypad();

void lcdcmd(unsigned char cmd)
{
	PORTD &= ~(1 << RS); // RS=0 for command
  6c:	92 b3       	in	r25, 0x12	; 18
  6e:	9f 7d       	andi	r25, 0xDF	; 223
  70:	92 bb       	out	0x12, r25	; 18
	PORTD &= ~(1 << RW); // RW=0 for write
  72:	92 b3       	in	r25, 0x12	; 18
  74:	9f 7b       	andi	r25, 0xBF	; 191
  76:	92 bb       	out	0x12, r25	; 18
	LCD = cmd & 0xF0;   // send upper nibble
  78:	98 2f       	mov	r25, r24
  7a:	90 7f       	andi	r25, 0xF0	; 240
  7c:	9b bb       	out	0x1b, r25	; 27
	PORTD |= (1 << EN); // EN=1 for H to L pulse
  7e:	92 b3       	in	r25, 0x12	; 18
  80:	90 68       	ori	r25, 0x80	; 128
  82:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	ef e9       	ldi	r30, 0x9F	; 159
  86:	ff e0       	ldi	r31, 0x0F	; 15
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <lcdcmd+0x1c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <lcdcmd+0x22>
  8e:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << EN); // EN=0 for H to L pulse
  90:	92 b3       	in	r25, 0x12	; 18
  92:	9f 77       	andi	r25, 0x7F	; 127
  94:	92 bb       	out	0x12, r25	; 18
	LCD = cmd << 4;      // send low nibble
  96:	82 95       	swap	r24
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	8b bb       	out	0x1b, r24	; 27
	PORTD |= (1 << EN); // EN=1 for H to L pulse
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcmd+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcdcmd+0x40>
  ac:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << EN);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret

000000b6 <lcddata>:
}

void lcddata(unsigned char data)
{
	PORTD |= (1 << RS); // RS=1 for data //RW=0 for write
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	90 62       	ori	r25, 0x20	; 32
  ba:	92 bb       	out	0x12, r25	; 18
	PORTD &= ~(1 << RW);
  bc:	92 b3       	in	r25, 0x12	; 18
  be:	9f 7b       	andi	r25, 0xBF	; 191
  c0:	92 bb       	out	0x12, r25	; 18

	LCD = data & 0xF0;   // send upper nibble
  c2:	98 2f       	mov	r25, r24
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	9b bb       	out	0x1b, r25	; 27
	PORTD |= (1 << EN); // EN=1 for H to L pulse
  c8:	92 b3       	in	r25, 0x12	; 18
  ca:	90 68       	ori	r25, 0x80	; 128
  cc:	92 bb       	out	0x12, r25	; 18
  ce:	ef e9       	ldi	r30, 0x9F	; 159
  d0:	ff e0       	ldi	r31, 0x0F	; 15
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcddata+0x1c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcddata+0x22>
  d8:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << EN); // EN=0 for H to L pulse
  da:	92 b3       	in	r25, 0x12	; 18
  dc:	9f 77       	andi	r25, 0x7F	; 127
  de:	92 bb       	out	0x12, r25	; 18
	LCD = data << 4;      // send low nibble
  e0:	82 95       	swap	r24
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	8b bb       	out	0x1b, r24	; 27
	PORTD |= (1 << EN); // EN=1 for H to L pulse
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	8f e9       	ldi	r24, 0x9F	; 159
  ee:	9f e0       	ldi	r25, 0x0F	; 15
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcddata+0x3a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcddata+0x40>
  f6:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << EN);
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8f 77       	andi	r24, 0x7F	; 127
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	08 95       	ret

00000100 <lcd_init>:
}

void lcd_init()
{
	DDRA = 0xFF; // define output LCD port
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF; // define RS,EN and RW pin as output
 104:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1 << EN); // initialize en = 0
 106:	82 b3       	in	r24, 0x12	; 18
 108:	8f 77       	andi	r24, 0x7F	; 127
 10a:	82 bb       	out	0x12, r24	; 18

	lcdcmd(0x33);
 10c:	83 e3       	ldi	r24, 0x33	; 51
 10e:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
	lcdcmd(0x32);
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
	lcdcmd(0x28); // LCD in 4 bit mode
 118:	88 e2       	ldi	r24, 0x28	; 40
 11a:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
	lcdcmd(0x0E); // display on cursor on
 11e:	8e e0       	ldi	r24, 0x0E	; 14
 120:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
	lcdcmd(0x01); // clear LCD
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9f e1       	ldi	r25, 0x1F	; 31
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x2e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x34>
 134:	00 00       	nop
 136:	08 95       	ret

00000138 <keypad>:
	return 0;
}

unsigned char keypad()
{
	PORTC = 0b11111110; // make first row 0
 138:	8e ef       	ldi	r24, 0xFE	; 254
 13a:	85 bb       	out	0x15, r24	; 21

	if ((PINC & (1 << PINC4)) == 0)
 13c:	9c 99       	sbic	0x13, 4	; 19
 13e:	0b c0       	rjmp	.+22     	; 0x156 <keypad+0x1e>
 140:	2f e7       	ldi	r18, 0x7F	; 127
 142:	8a e1       	ldi	r24, 0x1A	; 26
 144:	96 e0       	ldi	r25, 0x06	; 6
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <keypad+0xe>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <keypad+0x18>
 150:	00 00       	nop
	{
		_delay_ms(125);
		return '7';
 152:	87 e3       	ldi	r24, 0x37	; 55
 154:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0)
 156:	9d 99       	sbic	0x13, 5	; 19
 158:	0b c0       	rjmp	.+22     	; 0x170 <keypad+0x38>
 15a:	2f e7       	ldi	r18, 0x7F	; 127
 15c:	8a e1       	ldi	r24, 0x1A	; 26
 15e:	96 e0       	ldi	r25, 0x06	; 6
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <keypad+0x28>
 168:	00 c0       	rjmp	.+0      	; 0x16a <keypad+0x32>
 16a:	00 00       	nop
	{
		_delay_ms(125);
		return '8';
 16c:	88 e3       	ldi	r24, 0x38	; 56
 16e:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0)
 170:	9e 99       	sbic	0x13, 6	; 19
 172:	0b c0       	rjmp	.+22     	; 0x18a <keypad+0x52>
 174:	2f e7       	ldi	r18, 0x7F	; 127
 176:	8a e1       	ldi	r24, 0x1A	; 26
 178:	96 e0       	ldi	r25, 0x06	; 6
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <keypad+0x42>
 182:	00 c0       	rjmp	.+0      	; 0x184 <keypad+0x4c>
 184:	00 00       	nop
	{
		_delay_ms(125);
		return '9';
 186:	89 e3       	ldi	r24, 0x39	; 57
 188:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0)
 18a:	9f 99       	sbic	0x13, 7	; 19
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <keypad+0x6c>
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	8a e1       	ldi	r24, 0x1A	; 26
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <keypad+0x5c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <keypad+0x66>
 19e:	00 00       	nop
	{
		_delay_ms(125);
		return '/';
 1a0:	8f e2       	ldi	r24, 0x2F	; 47
 1a2:	08 95       	ret
	}

	PORTC = 0b11111101; // make second row 0
 1a4:	8d ef       	ldi	r24, 0xFD	; 253
 1a6:	85 bb       	out	0x15, r24	; 21

	if ((PINC & (1 << PINC4)) == 0)
 1a8:	9c 99       	sbic	0x13, 4	; 19
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <keypad+0x8a>
 1ac:	2f e7       	ldi	r18, 0x7F	; 127
 1ae:	8a e1       	ldi	r24, 0x1A	; 26
 1b0:	96 e0       	ldi	r25, 0x06	; 6
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <keypad+0x7a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <keypad+0x84>
 1bc:	00 00       	nop
	{
		_delay_ms(125);
		return '4';
 1be:	84 e3       	ldi	r24, 0x34	; 52
 1c0:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0)
 1c2:	9d 99       	sbic	0x13, 5	; 19
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <keypad+0xa4>
 1c6:	2f e7       	ldi	r18, 0x7F	; 127
 1c8:	8a e1       	ldi	r24, 0x1A	; 26
 1ca:	96 e0       	ldi	r25, 0x06	; 6
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <keypad+0x94>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <keypad+0x9e>
 1d6:	00 00       	nop
	{
		_delay_ms(125);
		return '5';
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0)
 1dc:	9e 99       	sbic	0x13, 6	; 19
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <keypad+0xbe>
 1e0:	2f e7       	ldi	r18, 0x7F	; 127
 1e2:	8a e1       	ldi	r24, 0x1A	; 26
 1e4:	96 e0       	ldi	r25, 0x06	; 6
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <keypad+0xae>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <keypad+0xb8>
 1f0:	00 00       	nop
	{
		_delay_ms(125);
		return '6';
 1f2:	86 e3       	ldi	r24, 0x36	; 54
 1f4:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0)
 1f6:	9f 99       	sbic	0x13, 7	; 19
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <keypad+0xd8>
 1fa:	2f e7       	ldi	r18, 0x7F	; 127
 1fc:	8a e1       	ldi	r24, 0x1A	; 26
 1fe:	96 e0       	ldi	r25, 0x06	; 6
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <keypad+0xc8>
 208:	00 c0       	rjmp	.+0      	; 0x20a <keypad+0xd2>
 20a:	00 00       	nop
	{
		_delay_ms(125);
		return '*';
 20c:	8a e2       	ldi	r24, 0x2A	; 42
 20e:	08 95       	ret
	}

	PORTC = 0b11111011; // make third row 0
 210:	8b ef       	ldi	r24, 0xFB	; 251
 212:	85 bb       	out	0x15, r24	; 21

	if ((PINC & (1 << PINC4)) == 0)
 214:	9c 99       	sbic	0x13, 4	; 19
 216:	0b c0       	rjmp	.+22     	; 0x22e <keypad+0xf6>
 218:	2f e7       	ldi	r18, 0x7F	; 127
 21a:	8a e1       	ldi	r24, 0x1A	; 26
 21c:	96 e0       	ldi	r25, 0x06	; 6
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <keypad+0xe6>
 226:	00 c0       	rjmp	.+0      	; 0x228 <keypad+0xf0>
 228:	00 00       	nop
	{
		_delay_ms(125);
		return '1';
 22a:	81 e3       	ldi	r24, 0x31	; 49
 22c:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0)
 22e:	9d 99       	sbic	0x13, 5	; 19
 230:	0b c0       	rjmp	.+22     	; 0x248 <keypad+0x110>
 232:	2f e7       	ldi	r18, 0x7F	; 127
 234:	8a e1       	ldi	r24, 0x1A	; 26
 236:	96 e0       	ldi	r25, 0x06	; 6
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <keypad+0x100>
 240:	00 c0       	rjmp	.+0      	; 0x242 <keypad+0x10a>
 242:	00 00       	nop
	{
		_delay_ms(125);
		return '2';
 244:	82 e3       	ldi	r24, 0x32	; 50
 246:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0)
 248:	9e 99       	sbic	0x13, 6	; 19
 24a:	0b c0       	rjmp	.+22     	; 0x262 <keypad+0x12a>
 24c:	2f e7       	ldi	r18, 0x7F	; 127
 24e:	8a e1       	ldi	r24, 0x1A	; 26
 250:	96 e0       	ldi	r25, 0x06	; 6
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <keypad+0x11a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <keypad+0x124>
 25c:	00 00       	nop
	{
		_delay_ms(125);
		return '3';
 25e:	83 e3       	ldi	r24, 0x33	; 51
 260:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0)
 262:	9f 99       	sbic	0x13, 7	; 19
 264:	0b c0       	rjmp	.+22     	; 0x27c <keypad+0x144>
 266:	2f e7       	ldi	r18, 0x7F	; 127
 268:	8b e8       	ldi	r24, 0x8B	; 139
 26a:	98 e0       	ldi	r25, 0x08	; 8
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <keypad+0x134>
 274:	00 c0       	rjmp	.+0      	; 0x276 <keypad+0x13e>
 276:	00 00       	nop
	{
		_delay_ms(175);
		return '-';
 278:	8d e2       	ldi	r24, 0x2D	; 45
 27a:	08 95       	ret
	}

	PORTC = 0b11110111; // make forth row 0
 27c:	87 ef       	ldi	r24, 0xF7	; 247
 27e:	85 bb       	out	0x15, r24	; 21

	if ((PINC & (1 << PINC4)) == 0)
 280:	9c 99       	sbic	0x13, 4	; 19
 282:	0b c0       	rjmp	.+22     	; 0x29a <keypad+0x162>
 284:	2f e7       	ldi	r18, 0x7F	; 127
 286:	8a e1       	ldi	r24, 0x1A	; 26
 288:	96 e0       	ldi	r25, 0x06	; 6
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <keypad+0x152>
 292:	00 c0       	rjmp	.+0      	; 0x294 <keypad+0x15c>
 294:	00 00       	nop
	{
		_delay_ms(125);
		return 'C';
 296:	83 e4       	ldi	r24, 0x43	; 67
 298:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0)
 29a:	9d 99       	sbic	0x13, 5	; 19
 29c:	0b c0       	rjmp	.+22     	; 0x2b4 <keypad+0x17c>
 29e:	2f e7       	ldi	r18, 0x7F	; 127
 2a0:	8a e1       	ldi	r24, 0x1A	; 26
 2a2:	96 e0       	ldi	r25, 0x06	; 6
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <keypad+0x16c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <keypad+0x176>
 2ae:	00 00       	nop
	{
		_delay_ms(125);
		return '0';
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0)
 2b4:	9e 99       	sbic	0x13, 6	; 19
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <keypad+0x196>
 2b8:	2f e7       	ldi	r18, 0x7F	; 127
 2ba:	8a e1       	ldi	r24, 0x1A	; 26
 2bc:	96 e0       	ldi	r25, 0x06	; 6
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <keypad+0x186>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <keypad+0x190>
 2c8:	00 00       	nop
	{
		_delay_ms(125);
		return '=';
 2ca:	8d e3       	ldi	r24, 0x3D	; 61
 2cc:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0)
 2ce:	9f 99       	sbic	0x13, 7	; 19
 2d0:	0b c0       	rjmp	.+22     	; 0x2e8 <keypad+0x1b0>
 2d2:	2f e7       	ldi	r18, 0x7F	; 127
 2d4:	8a e1       	ldi	r24, 0x1A	; 26
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <keypad+0x1a0>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <keypad+0x1aa>
 2e2:	00 00       	nop
	{
		_delay_ms(125);
		return '+';
 2e4:	8b e2       	ldi	r24, 0x2B	; 43
 2e6:	08 95       	ret
	}

	return 0;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret

000002ec <main>:
}

int main(void)
{
	unsigned char x;
	DDRC = 0x0F; // Make PCO to PC3 = O/P and PC4 to PC7 = 1/P
 2ec:	8f e0       	ldi	r24, 0x0F	; 15
 2ee:	84 bb       	out	0x14, r24	; 20
 2f0:	8f e9       	ldi	r24, 0x9F	; 159
 2f2:	9f e0       	ldi	r25, 0x0F	; 15
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x8>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0xe>
 2fa:	00 00       	nop
	_delay_ms(1);
	PORTC = 0xF0;
 2fc:	80 ef       	ldi	r24, 0xF0	; 240
 2fe:	85 bb       	out	0x15, r24	; 21

	lcd_init();
 300:	0e 94 80 00 	call	0x100	; 0x100 <lcd_init>

	while (1)
	{
		PORTC = 0xF0; // Make all 4 columns 1 and all 4 rows 0
 304:	80 ef       	ldi	r24, 0xF0	; 240
 306:	85 bb       	out	0x15, r24	; 21
 308:	9f e7       	ldi	r25, 0x7F	; 127
 30a:	28 e3       	ldi	r18, 0x38	; 56
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	91 50       	subi	r25, 0x01	; 1
 310:	20 40       	sbci	r18, 0x00	; 0
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x22>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x2c>
 318:	00 00       	nop
		_delay_ms(25);

		if (PINC != 0xF0)
 31a:	83 b3       	in	r24, 0x13	; 19
 31c:	80 3f       	cpi	r24, 0xF0	; 240
 31e:	91 f3       	breq	.-28     	; 0x304 <main+0x18>
		{
			x = keypad();
 320:	0e 94 9c 00 	call	0x138	; 0x138 <keypad>
			lcddata(x);
 324:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcddata>
 328:	ed cf       	rjmp	.-38     	; 0x304 <main+0x18>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
