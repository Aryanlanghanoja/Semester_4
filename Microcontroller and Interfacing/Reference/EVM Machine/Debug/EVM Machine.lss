
EVM Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008c  0080008c  000005b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001022  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000798  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000715  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ea  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000031b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  8a:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
 */ 

#include "LCD16x2_4bit.h"
void LCD_Command(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	92 60       	ori	r25, 0x02	; 2
  a8:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	32 e0       	ldi	r19, 0x02	; 2
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Command+0x20>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	9d 7f       	andi	r25, 0xFD	; 253
  b6:	98 bb       	out	0x18, r25	; 24
  b8:	e7 ec       	ldi	r30, 0xC7	; 199
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x30>
  c2:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
  c4:	28 b3       	in	r18, 0x18	; 24
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	92 2f       	mov	r25, r18
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	88 bb       	out	0x18, r24	; 24
  dc:	32 e0       	ldi	r19, 0x02	; 2
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x52>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x5c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x62>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_Char>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE */
}

void LCD_Char(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	28 2f       	mov	r18, r24
  fe:	20 7f       	andi	r18, 0xF0	; 240
 100:	92 2b       	or	r25, r18
 102:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
 104:	98 b3       	in	r25, 0x18	; 24
 106:	91 60       	ori	r25, 0x01	; 1
 108:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	92 60       	ori	r25, 0x02	; 2
 10e:	98 bb       	out	0x18, r25	; 24
 110:	32 e0       	ldi	r19, 0x02	; 2
 112:	3a 95       	dec	r19
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x1a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Char+0x20>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 118:	98 b3       	in	r25, 0x18	; 24
 11a:	9d 7f       	andi	r25, 0xFD	; 253
 11c:	98 bb       	out	0x18, r25	; 24
 11e:	e7 ec       	ldi	r30, 0xC7	; 199
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Char+0x2a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x30>
 128:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
 12a:	28 b3       	in	r18, 0x18	; 24
 12c:	f0 e1       	ldi	r31, 0x10	; 16
 12e:	8f 9f       	mul	r24, r31
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	92 2f       	mov	r25, r18
 136:	9f 70       	andi	r25, 0x0F	; 15
 138:	89 2b       	or	r24, r25
 13a:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	88 bb       	out	0x18, r24	; 24
 142:	32 e0       	ldi	r19, 0x02	; 2
 144:	3a 95       	dec	r19
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Char+0x4c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Char+0x52>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8d 7f       	andi	r24, 0xFD	; 253
 14e:	88 bb       	out	0x18, r24	; 24
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Char+0x5c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Char+0x62>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <LCD_Init>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE*/
}

void LCD_Init()
{
	LCD_DDDR = 0xFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Init+0x8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Init+0xe>
 16c:	00 00       	nop
	_delay_ms(20);									/* WAIT FOR SOME TIME */
	LCD_Command(0x02);								/* SEND $32 FOR INIT OT 0X02 */
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 174:	88 e2       	ldi	r24, 0x28	; 40
 176:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x0C);								/* DISPLAY ON CURSOR ON */
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x01);								/* LCD CLEAR */
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x82);								/* SHIFT CURSOR TO WRITE */
 186:	82 e8       	ldi	r24, 0x82	; 130
 188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 18c:	08 95       	ret

0000018e <LCD_String>:
	
	LCD_String(str);								/* Call LCD string function */
}

void LCD_String(char *str)
{
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <LCD_String+0x16>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 19e:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Char>
}

void LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	f8 01       	movw	r30, r16
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	80 81       	ld	r24, Z
 1ac:	81 11       	cpse	r24, r1
 1ae:	f7 cf       	rjmp	.-18     	; 0x19e <LCD_String+0x10>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <LCD_String_xy>:
	LCD_Command(0x01);								/* LCD CLEAR */
	LCD_Command(0x82);								/* SHIFT CURSOR TO WRITE */
}

void LCD_String_xy(unsigned char row, unsigned char pos, char *str)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ea 01       	movw	r28, r20
	if (row == 1)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <LCD_String_xy+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 1c4:	86 2f       	mov	r24, r22
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <LCD_String_xy+0x24>
	else if (row == 2)
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	29 f4       	brne	.+10     	; 0x1de <LCD_String_xy+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 1d4:	86 2f       	mov	r24, r22
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 6c       	ori	r24, 0xC0	; 192
 1da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	
	LCD_String(str);								/* Call LCD string function */
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_String>
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <LCD_Clear>:
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}

void LCD_Clear() {
	LCD_Command(0x01); // Clear display command
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_Clear+0xa>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_Clear+0x10>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <keyfind>:

unsigned char colloc, rowloc;

char keyfind() {
    while(1) {
        KEY_DDR = 0xF0;           
 1fe:	80 ef       	ldi	r24, 0xF0	; 240
 200:	8a bb       	out	0x1a, r24	; 26
        KEY_PRT = 0xFF;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	8b bb       	out	0x1b, r24	; 27
        
        do {
            KEY_PRT &= 0x0F;
 206:	8b b3       	in	r24, 0x1b	; 27
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	8b bb       	out	0x1b, r24	; 27
            asm("NOP");
 20c:	00 00       	nop
            colloc = (KEY_PIN & 0x0F);
 20e:	89 b3       	in	r24, 0x19	; 25
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
        } while(colloc != 0x0F);
 216:	8f 30       	cpi	r24, 0x0F	; 15
 218:	b1 f7       	brne	.-20     	; 0x206 <keyfind+0x8>
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9c e9       	ldi	r25, 0x9C	; 156
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <keyfind+0x20>
 222:	00 c0       	rjmp	.+0      	; 0x224 <keyfind+0x26>
 224:	00 00       	nop
        
        do {
            do {
                _delay_ms(20);     
                colloc = (KEY_PIN & 0x0F); 
 226:	89 b3       	in	r24, 0x19	; 25
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
            } while(colloc == 0x0F);        
 22e:	8f 30       	cpi	r24, 0x0F	; 15
 230:	a1 f3       	breq	.-24     	; 0x21a <keyfind+0x1c>
 232:	9f ef       	ldi	r25, 0xFF	; 255
 234:	29 ef       	ldi	r18, 0xF9	; 249
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	91 50       	subi	r25, 0x01	; 1
 23a:	20 40       	sbci	r18, 0x00	; 0
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <keyfind+0x3a>
 240:	00 c0       	rjmp	.+0      	; 0x242 <keyfind+0x44>
 242:	00 00       	nop
            _delay_ms(40);	            
            colloc = (KEY_PIN & 0x0F);
 244:	89 b3       	in	r24, 0x19	; 25
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
        } while(colloc == 0x0F);
 24c:	8f 30       	cpi	r24, 0x0F	; 15
 24e:	29 f3       	breq	.-54     	; 0x21a <keyfind+0x1c>

        KEY_PRT = 0xEF;            
 250:	8f ee       	ldi	r24, 0xEF	; 239
 252:	8b bb       	out	0x1b, r24	; 27
        asm("NOP");
 254:	00 00       	nop
        colloc = (KEY_PIN & 0x0F);
 256:	89 b3       	in	r24, 0x19	; 25
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
        if(colloc != 0x0F) {
 25e:	8f 30       	cpi	r24, 0x0F	; 15
 260:	19 f0       	breq	.+6      	; 0x268 <keyfind+0x6a>
            rowloc = 0;
 262:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <rowloc>
            break;
 266:	27 c0       	rjmp	.+78     	; 0x2b6 <keyfind+0xb8>
        }
        
        KEY_PRT = 0xDF;		
 268:	8f ed       	ldi	r24, 0xDF	; 223
 26a:	8b bb       	out	0x1b, r24	; 27
        asm("NOP");
 26c:	00 00       	nop
        colloc = (KEY_PIN & 0x0F);
 26e:	89 b3       	in	r24, 0x19	; 25
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
        if(colloc != 0x0F) {
 276:	8f 30       	cpi	r24, 0x0F	; 15
 278:	21 f0       	breq	.+8      	; 0x282 <keyfind+0x84>
            rowloc = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <rowloc>
            break;
 280:	1a c0       	rjmp	.+52     	; 0x2b6 <keyfind+0xb8>
        }
        
        KEY_PRT = 0xBF;		
 282:	8f eb       	ldi	r24, 0xBF	; 191
 284:	8b bb       	out	0x1b, r24	; 27
        asm("NOP");
 286:	00 00       	nop
        colloc = (KEY_PIN & 0x0F);
 288:	89 b3       	in	r24, 0x19	; 25
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
        if(colloc != 0x0F) {
 290:	8f 30       	cpi	r24, 0x0F	; 15
 292:	21 f0       	breq	.+8      	; 0x29c <keyfind+0x9e>
            rowloc = 2;
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <rowloc>
            break;
 29a:	0d c0       	rjmp	.+26     	; 0x2b6 <keyfind+0xb8>
        }

        KEY_PRT = 0x7F;		
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	8b bb       	out	0x1b, r24	; 27
        asm("NOP");
 2a0:	00 00       	nop
        colloc = (KEY_PIN & 0x0F);
 2a2:	89 b3       	in	r24, 0x19	; 25
 2a4:	8f 70       	andi	r24, 0x0F	; 15
 2a6:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
        if(colloc != 0x0F) {
 2aa:	8f 30       	cpi	r24, 0x0F	; 15
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <keyfind+0xb2>
 2ae:	a7 cf       	rjmp	.-178    	; 0x1fe <keyfind>
            rowloc = 3;
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <rowloc>
            break;
        }
    }

    if(colloc == 0x0E)
 2b6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 2ba:	8e 30       	cpi	r24, 0x0E	; 14
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <keyfind+0xd6>
        return(keypad[rowloc][0]);
 2be:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	e0 5a       	subi	r30, 0xA0	; 160
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	80 81       	ld	r24, Z
 2d2:	08 95       	ret
    else if(colloc == 0x0D)
 2d4:	8d 30       	cpi	r24, 0x0D	; 13
 2d6:	59 f4       	brne	.+22     	; 0x2ee <keyfind+0xf0>
        return(keypad[rowloc][1]);
 2d8:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	ee 0f       	add	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	e0 5a       	subi	r30, 0xA0	; 160
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	81 81       	ldd	r24, Z+1	; 0x01
 2ec:	08 95       	ret
    else if(colloc == 0x0B)
 2ee:	8b 30       	cpi	r24, 0x0B	; 11
 2f0:	59 f4       	brne	.+22     	; 0x308 <keyfind+0x10a>
        return(keypad[rowloc][2]);
 2f2:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	e0 5a       	subi	r30, 0xA0	; 160
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	82 81       	ldd	r24, Z+2	; 0x02
 306:	08 95       	ret
    else
        return(keypad[rowloc][3]);
 308:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	e0 5a       	subi	r30, 0xA0	; 160
 318:	ff 4f       	sbci	r31, 0xFF	; 255
 31a:	83 81       	ldd	r24, Z+3	; 0x03
}
 31c:	08 95       	ret

0000031e <main>:

int main(void) {
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	28 97       	sbiw	r28, 0x08	; 8
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
    int arr[] = {0,0,0,0};
 332:	fe 01       	movw	r30, r28
 334:	31 96       	adiw	r30, 0x01	; 1
 336:	88 e0       	ldi	r24, 0x08	; 8
 338:	df 01       	movw	r26, r30
 33a:	1d 92       	st	X+, r1
 33c:	8a 95       	dec	r24
 33e:	e9 f7       	brne	.-6      	; 0x33a <main+0x1c>
    char vote;
    LCD_Init();
 340:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
    LCD_String_xy(1,0,"You Voted:");
 344:	40 e7       	ldi	r20, 0x70	; 112
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
    while(1) {
        LCD_Command(0xC0);
 350:	80 ec       	ldi	r24, 0xC0	; 192
 352:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
        vote = keyfind();
 356:	0e 94 ff 00 	call	0x1fe	; 0x1fe <keyfind>
        switch (vote) {
 35a:	83 34       	cpi	r24, 0x43	; 67
 35c:	21 f1       	breq	.+72     	; 0x3a6 <main+0x88>
 35e:	28 f4       	brcc	.+10     	; 0x36a <main+0x4c>
 360:	81 34       	cpi	r24, 0x41	; 65
 362:	c1 f1       	breq	.+112    	; 0x3d4 <main+0xb6>
 364:	82 34       	cpi	r24, 0x42	; 66
 366:	41 f0       	breq	.+16     	; 0x378 <main+0x5a>
 368:	f3 cf       	rjmp	.-26     	; 0x350 <main+0x32>
 36a:	8e 34       	cpi	r24, 0x4E	; 78
 36c:	09 f4       	brne	.+2      	; 0x370 <main+0x52>
 36e:	49 c0       	rjmp	.+146    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 370:	81 35       	cpi	r24, 0x51	; 81
 372:	09 f4       	brne	.+2      	; 0x376 <main+0x58>
 374:	5d c0       	rjmp	.+186    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 376:	ec cf       	rjmp	.-40     	; 0x350 <main+0x32>
            case 'B':
                arr[0]++;
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	9a 81       	ldd	r25, Y+2	; 0x02
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	9a 83       	std	Y+2, r25	; 0x02
 380:	89 83       	std	Y+1, r24	; 0x01
                LCD_Clear(); // Clear the display before updating
 382:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(2,1,"BJP");   
 386:	4b e7       	ldi	r20, 0x7B	; 123
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 392:	bf ef       	ldi	r27, 0xFF	; 255
 394:	20 e7       	ldi	r18, 0x70	; 112
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	b1 50       	subi	r27, 0x01	; 1
 39a:	20 40       	sbci	r18, 0x00	; 0
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x7a>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x84>
 3a2:	00 00       	nop
 3a4:	d5 cf       	rjmp	.-86     	; 0x350 <main+0x32>
                _delay_ms(100);
                break;
            case 'C':
                arr[1]++;
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	9c 81       	ldd	r25, Y+4	; 0x04
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	9c 83       	std	Y+4, r25	; 0x04
 3ae:	8b 83       	std	Y+3, r24	; 0x03
                LCD_Clear();
 3b0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(2,1,"CON");
 3b4:	4f e7       	ldi	r20, 0x7F	; 127
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	a0 e7       	ldi	r26, 0x70	; 112
 3c4:	b2 e0       	ldi	r27, 0x02	; 2
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	a0 40       	sbci	r26, 0x00	; 0
 3ca:	b0 40       	sbci	r27, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0xa8>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0xb2>
 3d0:	00 00       	nop
 3d2:	be cf       	rjmp	.-132    	; 0x350 <main+0x32>
                _delay_ms(100);
                break;
            case 'A':
                arr[2]++;
 3d4:	8d 81       	ldd	r24, Y+5	; 0x05
 3d6:	9e 81       	ldd	r25, Y+6	; 0x06
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	9e 83       	std	Y+6, r25	; 0x06
 3dc:	8d 83       	std	Y+5, r24	; 0x05
                LCD_Clear();
 3de:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(2,1,"AAP");
 3e2:	43 e8       	ldi	r20, 0x83	; 131
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	80 e7       	ldi	r24, 0x70	; 112
 3f2:	92 e0       	ldi	r25, 0x02	; 2
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0xd6>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0xe0>
 3fe:	00 00       	nop
 400:	a7 cf       	rjmp	.-178    	; 0x350 <main+0x32>
                _delay_ms(100);
                break;
            case 'N':
                arr[3]++;
 402:	8f 81       	ldd	r24, Y+7	; 0x07
 404:	98 85       	ldd	r25, Y+8	; 0x08
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	98 87       	std	Y+8, r25	; 0x08
 40a:	8f 83       	std	Y+7, r24	; 0x07
                LCD_Clear();
 40c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(2,1,"NOTA");
 410:	47 e8       	ldi	r20, 0x87	; 135
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 41c:	af ef       	ldi	r26, 0xFF	; 255
 41e:	b0 e7       	ldi	r27, 0x70	; 112
 420:	22 e0       	ldi	r18, 0x02	; 2
 422:	a1 50       	subi	r26, 0x01	; 1
 424:	b0 40       	sbci	r27, 0x00	; 0
 426:	20 40       	sbci	r18, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	90 cf       	rjmp	.-224    	; 0x350 <main+0x32>
                _delay_ms(100);
                break;
            case 'Q':
                LCD_Clear();
 430:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(1,0,"BJP");
 434:	4b e7       	ldi	r20, 0x7B	; 123
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
                LCD_String_xy(2,1,arr[0]);
 440:	49 81       	ldd	r20, Y+1	; 0x01
 442:	5a 81       	ldd	r21, Y+2	; 0x02
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	90 e7       	ldi	r25, 0x70	; 112
 450:	a2 e0       	ldi	r26, 0x02	; 2
 452:	81 50       	subi	r24, 0x01	; 1
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	a0 40       	sbci	r26, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
                _delay_ms(100);
                LCD_Clear();
 45e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(1,0,"CON");
 462:	4f e7       	ldi	r20, 0x7F	; 127
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
                LCD_String_xy(2,1,arr[1]);
 46e:	4b 81       	ldd	r20, Y+3	; 0x03
 470:	5c 81       	ldd	r21, Y+4	; 0x04
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 47a:	bf ef       	ldi	r27, 0xFF	; 255
 47c:	20 e7       	ldi	r18, 0x70	; 112
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	b1 50       	subi	r27, 0x01	; 1
 482:	20 40       	sbci	r18, 0x00	; 0
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
                _delay_ms(100);
                LCD_Clear();
 48c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(1,0,"AAP");
 490:	43 e8       	ldi	r20, 0x83	; 131
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
                LCD_String_xy(2,1,arr[2]);
 49c:	4d 81       	ldd	r20, Y+5	; 0x05
 49e:	5e 81       	ldd	r21, Y+6	; 0x06
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 4a8:	9f ef       	ldi	r25, 0xFF	; 255
 4aa:	a0 e7       	ldi	r26, 0x70	; 112
 4ac:	b2 e0       	ldi	r27, 0x02	; 2
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	a0 40       	sbci	r26, 0x00	; 0
 4b2:	b0 40       	sbci	r27, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
                _delay_ms(100);
                LCD_Clear();
 4ba:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                LCD_String_xy(1,0,"NOTA");
 4be:	47 e8       	ldi	r20, 0x87	; 135
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
                LCD_String_xy(2,1,arr[3]);
 4ca:	4f 81       	ldd	r20, Y+7	; 0x07
 4cc:	58 85       	ldd	r21, Y+8	; 0x08
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	80 e7       	ldi	r24, 0x70	; 112
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e6:	00 00       	nop
                _delay_ms(100);
                LCD_Clear();
 4e8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Clear>
                break;
 4ec:	31 cf       	rjmp	.-414    	; 0x350 <main+0x32>

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
