
Experiment_2_Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000344  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000344  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa1  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f1  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f2  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000052b  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000241d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  7a:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Pattern_0>:
#include <avr/io.h>
#include <util/delay.h>
#define F_CPU 16000000UL;

void Pattern_0 () {
	PORTC = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e9       	ldi	r18, 0x9F	; 159
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <Pattern_0+0xa>
  94:	00 c0       	rjmp	.+0      	; 0x96 <Pattern_0+0x14>
  96:	00 00       	nop
	_delay_ms(500);
	PORTC = 0x00;
  98:	15 ba       	out	0x15, r1	; 21
  9a:	2f e9       	ldi	r18, 0x9F	; 159
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <Pattern_0+0x1e>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <Pattern_0+0x28>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <Pattern_1>:
	_delay_ms(500);
}

void Pattern_1 () {
	PORTC = 0xAA;
  ae:	8a ea       	ldi	r24, 0xAA	; 170
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	2f e9       	ldi	r18, 0x9F	; 159
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <Pattern_1+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <Pattern_1+0x14>
  c2:	00 00       	nop
	_delay_ms(500);
	PORTC = 0x55;
  c4:	85 e5       	ldi	r24, 0x55	; 85
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	2f e9       	ldi	r18, 0x9F	; 159
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <Pattern_1+0x20>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <Pattern_1+0x2a>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <Pattern_2>:
	_delay_ms(500);
}

void Pattern_2 () {
	PORTC = 0xF0;
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	85 bb       	out	0x15, r24	; 21
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <Pattern_2+0xa>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <Pattern_2+0x14>
  f0:	00 00       	nop
	_delay_ms(500);
	PORTC = 0x0F;
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	2f e9       	ldi	r18, 0x9F	; 159
  f8:	86 e8       	ldi	r24, 0x86	; 134
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <Pattern_2+0x20>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Pattern_2+0x2a>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <Pattern_3>:
	_delay_ms(500);
}

void Pattern_3 () {
	PORTC = 0x00;
 10a:	15 ba       	out	0x15, r1	; 21
 10c:	2f e9       	ldi	r18, 0x9F	; 159
 10e:	86 e8       	ldi	r24, 0x86	; 134
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <Pattern_3+0x8>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Pattern_3+0x12>
 11c:	00 00       	nop
	_delay_ms(500);
	PORTC = 0x01 ;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	85 bb       	out	0x15, r24	; 21
	
	while(PORTC != 0x00) {
 122:	10 c0       	rjmp	.+32     	; 0x144 <Pattern_3+0x3a>
 124:	2f e9       	ldi	r18, 0x9F	; 159
 126:	86 e8       	ldi	r24, 0x86	; 134
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <Pattern_3+0x20>
 132:	00 c0       	rjmp	.+0      	; 0x134 <Pattern_3+0x2a>
 134:	00 00       	nop
		_delay_ms(500);
		PORTC = PORTC << 1 ;
 136:	85 b3       	in	r24, 0x15	; 21
 138:	88 0f       	add	r24, r24
 13a:	85 bb       	out	0x15, r24	; 21
		
		if(PORTC == 0xFF) {
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	8f 3f       	cpi	r24, 0xFF	; 255
 140:	09 f4       	brne	.+2      	; 0x144 <Pattern_3+0x3a>
			PORTC == 0x01 ;
 142:	85 b3       	in	r24, 0x15	; 21
void Pattern_3 () {
	PORTC = 0x00;
	_delay_ms(500);
	PORTC = 0x01 ;
	
	while(PORTC != 0x00) {
 144:	85 b3       	in	r24, 0x15	; 21
 146:	81 11       	cpse	r24, r1
 148:	ed cf       	rjmp	.-38     	; 0x124 <Pattern_3+0x1a>
		
		if(PORTC == 0xFF) {
			PORTC == 0x01 ;
		}
	}
}
 14a:	08 95       	ret

0000014c <Pattern_4>:

void Pattern_4 () {
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	60 97       	sbiw	r28, 0x10	; 16
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	PORTC = 0xFF ;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	85 bb       	out	0x15, r24	; 21
 164:	2f e9       	ldi	r18, 0x9F	; 159
 166:	36 e8       	ldi	r19, 0x86	; 134
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	30 40       	sbci	r19, 0x00	; 0
 16e:	40 40       	sbci	r20, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <Pattern_4+0x1e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Pattern_4+0x28>
 174:	00 00       	nop
	_delay_ms(500);
	int Sequences[8] = {0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F};
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	e0 e6       	ldi	r30, 0x60	; 96
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	de 01       	movw	r26, r28
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <Pattern_4+0x34>
		
		int i = 0 ;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
		while (i <= 9) {
 18c:	25 c0       	rjmp	.+74     	; 0x1d8 <Pattern_4+0x8c>
			PORTC = Sequences[i] ;
 18e:	fc 01       	movw	r30, r24
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	2c 0f       	add	r18, r28
 19a:	3d 1f       	adc	r19, r29
 19c:	e2 0f       	add	r30, r18
 19e:	f3 1f       	adc	r31, r19
 1a0:	20 81       	ld	r18, Z
 1a2:	25 bb       	out	0x15, r18	; 21
 1a4:	3f e9       	ldi	r19, 0x9F	; 159
 1a6:	46 e8       	ldi	r20, 0x86	; 134
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	31 50       	subi	r19, 0x01	; 1
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <Pattern_4+0x5e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <Pattern_4+0x68>
 1b4:	00 00       	nop
			_delay_ms(500);
			
			if(i == 9) {
 1b6:	89 30       	cpi	r24, 0x09	; 9
 1b8:	91 05       	cpc	r25, r1
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <Pattern_4+0x8a>
				i = -1 ;
				PORTC = 0xFF;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	85 bb       	out	0x15, r24	; 21
 1c0:	3f e9       	ldi	r19, 0x9F	; 159
 1c2:	46 e8       	ldi	r20, 0x86	; 134
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	31 50       	subi	r19, 0x01	; 1
 1c8:	40 40       	sbci	r20, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <Pattern_4+0x7a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <Pattern_4+0x84>
 1d0:	00 00       	nop
		while (i <= 9) {
			PORTC = Sequences[i] ;
			_delay_ms(500);
			
			if(i == 9) {
				i = -1 ;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
				PORTC = 0xFF;
				_delay_ms(500);
			}
			i++;
 1d6:	01 96       	adiw	r24, 0x01	; 1
	PORTC = 0xFF ;
	_delay_ms(500);
	int Sequences[8] = {0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F};
		
		int i = 0 ;
		while (i <= 9) {
 1d8:	8a 30       	cpi	r24, 0x0A	; 10
 1da:	91 05       	cpc	r25, r1
 1dc:	c4 f2       	brlt	.-80     	; 0x18e <Pattern_4+0x42>
				PORTC = 0xFF;
				_delay_ms(500);
			}
			i++;
		}
}
 1de:	60 96       	adiw	r28, 0x10	; 16
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <Pattern_5>:

void Pattern_5 () {
	PORTC = 0x00;
 1f0:	15 ba       	out	0x15, r1	; 21
 1f2:	2f e9       	ldi	r18, 0x9F	; 159
 1f4:	86 e8       	ldi	r24, 0x86	; 134
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <Pattern_5+0x8>
 200:	00 c0       	rjmp	.+0      	; 0x202 <Pattern_5+0x12>
 202:	00 00       	nop
	_delay_ms(500);
	PORTC = 0x80 ;
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	85 bb       	out	0x15, r24	; 21
	
	while(PORTC != 0x00) {
 208:	10 c0       	rjmp	.+32     	; 0x22a <Pattern_5+0x3a>
 20a:	2f e9       	ldi	r18, 0x9F	; 159
 20c:	86 e8       	ldi	r24, 0x86	; 134
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <Pattern_5+0x20>
 218:	00 c0       	rjmp	.+0      	; 0x21a <Pattern_5+0x2a>
 21a:	00 00       	nop
		_delay_ms(500);
		PORTC = PORTC >> 1 ;
 21c:	85 b3       	in	r24, 0x15	; 21
 21e:	86 95       	lsr	r24
 220:	85 bb       	out	0x15, r24	; 21
		
		if(PORTC == 0x01) {
 222:	85 b3       	in	r24, 0x15	; 21
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	09 f4       	brne	.+2      	; 0x22a <Pattern_5+0x3a>
			PORTC == 0x80 ;
 228:	85 b3       	in	r24, 0x15	; 21
void Pattern_5 () {
	PORTC = 0x00;
	_delay_ms(500);
	PORTC = 0x80 ;
	
	while(PORTC != 0x00) {
 22a:	85 b3       	in	r24, 0x15	; 21
 22c:	81 11       	cpse	r24, r1
 22e:	ed cf       	rjmp	.-38     	; 0x20a <Pattern_5+0x1a>
		
		if(PORTC == 0x01) {
			PORTC == 0x80 ;
		}
	}	
}
 230:	08 95       	ret

00000232 <Pattern_6>:

void Pattern_6 () {
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	2e 97       	sbiw	r28, 0x0e	; 14
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
	PORTC = 0x00;
 246:	15 ba       	out	0x15, r1	; 21
 248:	2f e9       	ldi	r18, 0x9F	; 159
 24a:	36 e8       	ldi	r19, 0x86	; 134
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	30 40       	sbci	r19, 0x00	; 0
 252:	40 40       	sbci	r20, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <Pattern_6+0x1c>
 256:	00 c0       	rjmp	.+0      	; 0x258 <Pattern_6+0x26>
 258:	00 00       	nop
	_delay_ms(500);
	int Sequences[7] = {0x81,0x42,0x24,0x18,0x24,0x42,0x81};	
 25a:	8e e0       	ldi	r24, 0x0E	; 14
 25c:	e0 e7       	ldi	r30, 0x70	; 112
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	de 01       	movw	r26, r28
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	01 90       	ld	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	8a 95       	dec	r24
 26a:	e1 f7       	brne	.-8      	; 0x264 <Pattern_6+0x32>
	
	int i = 0 ;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
	while (i <= 7) {
 270:	1a c0       	rjmp	.+52     	; 0x2a6 <Pattern_6+0x74>
		PORTC = Sequences[i] ;
 272:	fc 01       	movw	r30, r24
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	2c 0f       	add	r18, r28
 27e:	3d 1f       	adc	r19, r29
 280:	e2 0f       	add	r30, r18
 282:	f3 1f       	adc	r31, r19
 284:	20 81       	ld	r18, Z
 286:	25 bb       	out	0x15, r18	; 21
 288:	3f e9       	ldi	r19, 0x9F	; 159
 28a:	46 e8       	ldi	r20, 0x86	; 134
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	31 50       	subi	r19, 0x01	; 1
 290:	40 40       	sbci	r20, 0x00	; 0
 292:	20 40       	sbci	r18, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <Pattern_6+0x5c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <Pattern_6+0x66>
 298:	00 00       	nop
		_delay_ms(500);
		i++;
 29a:	01 96       	adiw	r24, 0x01	; 1
		
		if(i == 8) {
 29c:	88 30       	cpi	r24, 0x08	; 8
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <Pattern_6+0x74>
			i = 0 ;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
	PORTC = 0x00;
	_delay_ms(500);
	int Sequences[7] = {0x81,0x42,0x24,0x18,0x24,0x42,0x81};	
	
	int i = 0 ;
	while (i <= 7) {
 2a6:	88 30       	cpi	r24, 0x08	; 8
 2a8:	91 05       	cpc	r25, r1
 2aa:	1c f3       	brlt	.-58     	; 0x272 <Pattern_6+0x40>
		
		if(i == 8) {
			i = 0 ;
		}
	}
}
 2ac:	2e 96       	adiw	r28, 0x0e	; 14
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <Pattern_7>:

void Pattern_7 () {
	PORTC = 0x7F;	
 2be:	8f e7       	ldi	r24, 0x7F	; 127
 2c0:	85 bb       	out	0x15, r24	; 21
 2c2:	08 95       	ret

000002c4 <Pattern_8>:
}

void Pattern_8 () {
	PORTC = 0xFF;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	85 bb       	out	0x15, r24	; 21
 2c8:	08 95       	ret

000002ca <Pattern_9>:
}

void Pattern_9 () {
	PORTC = 0x00;
 2ca:	15 ba       	out	0x15, r1	; 21
 2cc:	08 95       	ret

000002ce <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRC = 0xFF;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	84 bb       	out	0x14, r24	; 20
	DDRB = 0x00;
 2d2:	17 ba       	out	0x17, r1	; 23
	DDRB = DDRB | 0xF0 ;
 2d4:	87 b3       	in	r24, 0x17	; 23
 2d6:	80 6f       	ori	r24, 0xF0	; 240
 2d8:	87 bb       	out	0x17, r24	; 23
	
    while (1) {
		
		if(PINB == 0x00) {
 2da:	86 b3       	in	r24, 0x16	; 22
 2dc:	81 11       	cpse	r24, r1
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <main+0x16>
			Pattern_0();
 2e0:	0e 94 41 00 	call	0x82	; 0x82 <Pattern_0>
		}
		
		if (PINB == 0x01) {
 2e4:	86 b3       	in	r24, 0x16	; 22
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	11 f4       	brne	.+4      	; 0x2ee <main+0x20>
			Pattern_1();
 2ea:	0e 94 57 00 	call	0xae	; 0xae <Pattern_1>
		}
		
		if (PINB == 0x02) {
 2ee:	86 b3       	in	r24, 0x16	; 22
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	11 f4       	brne	.+4      	; 0x2f8 <main+0x2a>
			Pattern_2();
 2f4:	0e 94 6e 00 	call	0xdc	; 0xdc <Pattern_2>
		}
		
		if (PINB == 0x03) {
 2f8:	86 b3       	in	r24, 0x16	; 22
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	11 f4       	brne	.+4      	; 0x302 <main+0x34>
			Pattern_3();
 2fe:	0e 94 85 00 	call	0x10a	; 0x10a <Pattern_3>
		}
		
		if (PINB == 0x04) {
 302:	86 b3       	in	r24, 0x16	; 22
 304:	84 30       	cpi	r24, 0x04	; 4
 306:	11 f4       	brne	.+4      	; 0x30c <main+0x3e>
			Pattern_4();
 308:	0e 94 a6 00 	call	0x14c	; 0x14c <Pattern_4>
		}
		
		if (PINB == 0x05) {
 30c:	86 b3       	in	r24, 0x16	; 22
 30e:	85 30       	cpi	r24, 0x05	; 5
 310:	11 f4       	brne	.+4      	; 0x316 <main+0x48>
			Pattern_5();
 312:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Pattern_5>
		}
		
		if (PINB == 0x06) {
 316:	86 b3       	in	r24, 0x16	; 22
 318:	86 30       	cpi	r24, 0x06	; 6
 31a:	11 f4       	brne	.+4      	; 0x320 <main+0x52>
			Pattern_6();
 31c:	0e 94 19 01 	call	0x232	; 0x232 <Pattern_6>
		}
		
		if (PINB == 0x07) {
 320:	86 b3       	in	r24, 0x16	; 22
 322:	87 30       	cpi	r24, 0x07	; 7
 324:	11 f4       	brne	.+4      	; 0x32a <main+0x5c>
			Pattern_7();
 326:	0e 94 5f 01 	call	0x2be	; 0x2be <Pattern_7>
		}
		
		if (PINB == 0x08) {
 32a:	86 b3       	in	r24, 0x16	; 22
 32c:	88 30       	cpi	r24, 0x08	; 8
 32e:	11 f4       	brne	.+4      	; 0x334 <main+0x66>
			Pattern_8();
 330:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Pattern_8>
		}
		
		if (PINB == 0x09) {
 334:	86 b3       	in	r24, 0x16	; 22
 336:	89 30       	cpi	r24, 0x09	; 9
 338:	81 f6       	brne	.-96     	; 0x2da <main+0xc>
			Pattern_9();
 33a:	0e 94 65 01 	call	0x2ca	; 0x2ca <Pattern_9>
 33e:	cd cf       	rjmp	.-102    	; 0x2da <main+0xc>

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
