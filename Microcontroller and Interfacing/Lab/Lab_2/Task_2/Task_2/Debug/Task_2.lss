
Task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f2  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  0000165e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#define F_CPU 16000000UL 

int main(void)
{
	DDRA = 0xFF ;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x00;
  70:	14 ba       	out	0x14, r1	; 20
	DDRC = DDRC | 0x03 ;
  72:	84 b3       	in	r24, 0x14	; 20
  74:	83 60       	ori	r24, 0x03	; 3
  76:	84 bb       	out	0x14, r24	; 20
	
    /* Replace with your application code */
    while (1) {
		if (PINC == 0x00) {
  78:	83 b3       	in	r24, 0x13	; 19
  7a:	81 11       	cpse	r24, r1
  7c:	16 c0       	rjmp	.+44     	; 0xaa <main+0x3e>
			PORTA = 0x00 ;
  7e:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f e3       	ldi	r18, 0x3F	; 63
  82:	8d e0       	ldi	r24, 0x0D	; 13
  84:	93 e0       	ldi	r25, 0x03	; 3
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
			_delay_ms(1000);
			PORTA = 0xFF ;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8b bb       	out	0x1b, r24	; 27
  96:	2f e3       	ldi	r18, 0x3F	; 63
  98:	8d e0       	ldi	r24, 0x0D	; 13
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
  a8:	e7 cf       	rjmp	.-50     	; 0x78 <main+0xc>
			_delay_ms(1000);
		}
		
		else if (PINC == 0x01) {
  aa:	83 b3       	in	r24, 0x13	; 19
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	49 f5       	brne	.+82     	; 0x102 <main+0x96>
			PORTA = 0x01 ;
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	1a c0       	rjmp	.+52     	; 0xfa <main+0x8e>
			_delay_ms(1000);
			
			while (PORTA != 0x80) {
				PORTA = PORTA << 1 ;
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	88 0f       	add	r24, r24
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
				_delay_ms(1000);
				
				if(PORTA == 0x80) {
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	80 38       	cpi	r24, 0x80	; 128
  e2:	59 f4       	brne	.+22     	; 0xfa <main+0x8e>
					PORTA = 0x01 ;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	2f e3       	ldi	r18, 0x3F	; 63
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x82>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x8c>
  f8:	00 00       	nop
		
		else if (PINC == 0x01) {
			PORTA = 0x01 ;
			_delay_ms(1000);
			
			while (PORTA != 0x80) {
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	80 38       	cpi	r24, 0x80	; 128
  fe:	19 f7       	brne	.-58     	; 0xc6 <main+0x5a>
 100:	bb cf       	rjmp	.-138    	; 0x78 <main+0xc>
					_delay_ms(1000) ;
				}
			}
		} 
		
		else if (PINC == 0x02) {
 102:	83 b3       	in	r24, 0x13	; 19
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	51 f5       	brne	.+84     	; 0x15c <main+0xf0>
			PORTA = 0x80 ;
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	2f e3       	ldi	r18, 0x3F	; 63
 10e:	8d e0       	ldi	r24, 0x0D	; 13
 110:	93 e0       	ldi	r25, 0x03	; 3
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0xa6>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0xb0>
 11c:	00 00       	nop
 11e:	1a c0       	rjmp	.+52     	; 0x154 <main+0xe8>
			_delay_ms(1000);
			
			while (PORTA != 0x01) {
				PORTA = PORTA >> 1 ;
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	86 95       	lsr	r24
 124:	8b bb       	out	0x1b, r24	; 27
 126:	2f e3       	ldi	r18, 0x3F	; 63
 128:	8d e0       	ldi	r24, 0x0D	; 13
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xc0>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xca>
 136:	00 00       	nop
				_delay_ms(1000);
				
				if(PORTA == 0x01) {
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <main+0xe8>
					PORTA = 0x80 ;
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	8b bb       	out	0x1b, r24	; 27
 142:	2f e3       	ldi	r18, 0x3F	; 63
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xdc>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xe6>
 152:	00 00       	nop
		
		else if (PINC == 0x02) {
			PORTA = 0x80 ;
			_delay_ms(1000);
			
			while (PORTA != 0x01) {
 154:	8b b3       	in	r24, 0x1b	; 27
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	19 f7       	brne	.-58     	; 0x120 <main+0xb4>
 15a:	8e cf       	rjmp	.-228    	; 0x78 <main+0xc>
					_delay_ms(1000) ;
				}
			}
		}
		
		else if (PINC == 0x03) {
 15c:	83 b3       	in	r24, 0x13	; 19
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	09 f0       	breq	.+2      	; 0x164 <main+0xf8>
 162:	8a cf       	rjmp	.-236    	; 0x78 <main+0xc>
			
			while (1) {
				PORTA = 0xAA ;
 164:	8a ea       	ldi	r24, 0xAA	; 170
 166:	8b bb       	out	0x1b, r24	; 27
 168:	2f e3       	ldi	r18, 0x3F	; 63
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x102>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x10c>
 178:	00 00       	nop
				_delay_ms(1000) ;
				PORTA = 0x55 ;
 17a:	85 e5       	ldi	r24, 0x55	; 85
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	2f e3       	ldi	r18, 0x3F	; 63
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x118>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x122>
 18e:	00 00       	nop
 190:	e9 cf       	rjmp	.-46     	; 0x164 <main+0xf8>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
