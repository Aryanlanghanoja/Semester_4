
DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d0  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018b  00000000  00000000  00001586  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	a0 97       	sbiw	r28, 0x20	; 32
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
			
    /* Replace with your application code */
	//int HexCodes[16] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67,0x77,0x7C,0x39,0x5E,0x79,0x71};
		int HexCodes[16] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x98,0x88,0x83,0xC6,0xA1,0x86,0x8E};
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	DDRA = 0x00;
  a8:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x03;
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	81 bb       	out	0x11, r24	; 17
	int i = 0 ;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	1a c0       	rjmp	.+52     	; 0xec <main+0x6a>
    while (1) 
    {
		
		// Decimal Up
		while (PINA == 0x03) {
			if(i == 10) {
  b8:	8a 30       	cpi	r24, 0x0A	; 10
  ba:	91 05       	cpc	r25, r1
  bc:	11 f4       	brne	.+4      	; 0xc2 <main+0x40>
				i = 0 ;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			PORTD = HexCodes[i] ;
  c2:	fc 01       	movw	r30, r24
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	2c 0f       	add	r18, r28
  ce:	3d 1f       	adc	r19, r29
  d0:	e2 0f       	add	r30, r18
  d2:	f3 1f       	adc	r31, r19
  d4:	20 81       	ld	r18, Z
  d6:	22 bb       	out	0x12, r18	; 18
			i++;
  d8:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	3f ef       	ldi	r19, 0xFF	; 255
  dc:	40 e7       	ldi	r20, 0x70	; 112
  de:	22 e0       	ldi	r18, 0x02	; 2
  e0:	31 50       	subi	r19, 0x01	; 1
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	20 40       	sbci	r18, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x5e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x68>
  ea:	00 00       	nop
	
    while (1) 
    {
		
		// Decimal Up
		while (PINA == 0x03) {
  ec:	29 b3       	in	r18, 0x19	; 25
  ee:	23 30       	cpi	r18, 0x03	; 3
  f0:	e1 f4       	brne	.+56     	; 0x12a <main+0xa8>
  f2:	e2 cf       	rjmp	.-60     	; 0xb8 <main+0x36>
			_delay_ms(50);
		}
		
		// Decimal Down
		while (PINA == 0x02) {
			if(i == -1) {
  f4:	8f 3f       	cpi	r24, 0xFF	; 255
  f6:	3f ef       	ldi	r19, 0xFF	; 255
  f8:	93 07       	cpc	r25, r19
  fa:	11 f4       	brne	.+4      	; 0x100 <main+0x7e>
				i = 9 ;
  fc:	89 e0       	ldi	r24, 0x09	; 9
  fe:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			PORTD = HexCodes[i] ;
 100:	fc 01       	movw	r30, r24
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	2c 0f       	add	r18, r28
 10c:	3d 1f       	adc	r19, r29
 10e:	e2 0f       	add	r30, r18
 110:	f3 1f       	adc	r31, r19
 112:	20 81       	ld	r18, Z
 114:	22 bb       	out	0x12, r18	; 18
			i--;
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	3f ef       	ldi	r19, 0xFF	; 255
 11a:	40 e7       	ldi	r20, 0x70	; 112
 11c:	22 e0       	ldi	r18, 0x02	; 2
 11e:	31 50       	subi	r19, 0x01	; 1
 120:	40 40       	sbci	r20, 0x00	; 0
 122:	20 40       	sbci	r18, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x9c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa6>
 128:	00 00       	nop
			i++;
			_delay_ms(50);
		}
		
		// Decimal Down
		while (PINA == 0x02) {
 12a:	29 b3       	in	r18, 0x19	; 25
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	11 f3       	breq	.-60     	; 0xf4 <main+0x72>
 130:	1a c0       	rjmp	.+52     	; 0x166 <main+0xe4>
			_delay_ms(50);
		}
		
		// Hex Up
		while (PINA == 0x01) {
			if(i == 16) {
 132:	80 31       	cpi	r24, 0x10	; 16
 134:	91 05       	cpc	r25, r1
 136:	11 f4       	brne	.+4      	; 0x13c <main+0xba>
				i = 0 ;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			PORTD = HexCodes[i] ;
 13c:	fc 01       	movw	r30, r24
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	2c 0f       	add	r18, r28
 148:	3d 1f       	adc	r19, r29
 14a:	e2 0f       	add	r30, r18
 14c:	f3 1f       	adc	r31, r19
 14e:	20 81       	ld	r18, Z
 150:	22 bb       	out	0x12, r18	; 18
			i++;
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	3f ef       	ldi	r19, 0xFF	; 255
 156:	40 e7       	ldi	r20, 0x70	; 112
 158:	22 e0       	ldi	r18, 0x02	; 2
 15a:	31 50       	subi	r19, 0x01	; 1
 15c:	40 40       	sbci	r20, 0x00	; 0
 15e:	20 40       	sbci	r18, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xd8>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xe2>
 164:	00 00       	nop
			i--;
			_delay_ms(50);
		}
		
		// Hex Up
		while (PINA == 0x01) {
 166:	29 b3       	in	r18, 0x19	; 25
 168:	21 30       	cpi	r18, 0x01	; 1
 16a:	19 f3       	breq	.-58     	; 0x132 <main+0xb0>
 16c:	1b c0       	rjmp	.+54     	; 0x1a4 <main+0x122>
			_delay_ms(50);
		}
		
		// Hex Down
		while (PINA == 0x00) {
			if(i == -1) {
 16e:	8f 3f       	cpi	r24, 0xFF	; 255
 170:	3f ef       	ldi	r19, 0xFF	; 255
 172:	93 07       	cpc	r25, r19
 174:	11 f4       	brne	.+4      	; 0x17a <main+0xf8>
				i = 15 ;
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			PORTD = HexCodes[i] ;
 17a:	fc 01       	movw	r30, r24
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	2c 0f       	add	r18, r28
 186:	3d 1f       	adc	r19, r29
 188:	e2 0f       	add	r30, r18
 18a:	f3 1f       	adc	r31, r19
 18c:	20 81       	ld	r18, Z
 18e:	22 bb       	out	0x12, r18	; 18
			i--;
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	3f ef       	ldi	r19, 0xFF	; 255
 194:	40 e7       	ldi	r20, 0x70	; 112
 196:	22 e0       	ldi	r18, 0x02	; 2
 198:	31 50       	subi	r19, 0x01	; 1
 19a:	40 40       	sbci	r20, 0x00	; 0
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x116>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x120>
 1a2:	00 00       	nop
			i++;
			_delay_ms(50);
		}
		
		// Hex Down
		while (PINA == 0x00) {
 1a4:	29 b3       	in	r18, 0x19	; 25
 1a6:	22 23       	and	r18, r18
 1a8:	11 f3       	breq	.-60     	; 0x16e <main+0xec>
 1aa:	a0 cf       	rjmp	.-192    	; 0xec <main+0x6a>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
