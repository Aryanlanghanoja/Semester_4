
Question-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082a  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058a  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000318  00000000  00000000  0000170f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/delay.h>
#define F_CPU 16000000UL

int main(void)
{
    DDRB = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
		for(int i = 0 ; i< 5 ; i++) {
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	16 c0       	rjmp	.+44     	; 0xa2 <main+0x36>
			PORTB = 0xFF;
  76:	2f ef       	ldi	r18, 0xFF	; 255
  78:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	2f e3       	ldi	r18, 0x3F	; 63
  7c:	3d e0       	ldi	r19, 0x0D	; 13
  7e:	43 e0       	ldi	r20, 0x03	; 3
  80:	21 50       	subi	r18, 0x01	; 1
  82:	30 40       	sbci	r19, 0x00	; 0
  84:	40 40       	sbci	r20, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x00;
  8c:	18 ba       	out	0x18, r1	; 24
  8e:	2f e3       	ldi	r18, 0x3F	; 63
  90:	3d e0       	ldi	r19, 0x0D	; 13
  92:	43 e0       	ldi	r20, 0x03	; 3
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
{
    DDRB = 0xFF;
	
    while (1) 
    {
		for(int i = 0 ; i< 5 ; i++) {
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	85 30       	cpi	r24, 0x05	; 5
  a4:	91 05       	cpc	r25, r1
  a6:	3c f3       	brlt	.-50     	; 0x76 <main+0xa>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	17 c0       	rjmp	.+46     	; 0xdc <main+0x70>
			PORTB = 0x00;
			_delay_ms(1000);
		}
		
		for(int i = 0 ;i < 5 ; i++) {
			PORTB = 0xF0 ;
  ae:	20 ef       	ldi	r18, 0xF0	; 240
  b0:	28 bb       	out	0x18, r18	; 24
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	3d e0       	ldi	r19, 0x0D	; 13
  b6:	43 e0       	ldi	r20, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	30 40       	sbci	r19, 0x00	; 0
  bc:	40 40       	sbci	r20, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x0F;
  c4:	2f e0       	ldi	r18, 0x0F	; 15
  c6:	28 bb       	out	0x18, r18	; 24
  c8:	2f e3       	ldi	r18, 0x3F	; 63
  ca:	3d e0       	ldi	r19, 0x0D	; 13
  cc:	43 e0       	ldi	r20, 0x03	; 3
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	40 40       	sbci	r20, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x62>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x00;
			_delay_ms(1000);
		}
		
		for(int i = 0 ;i < 5 ; i++) {
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	85 30       	cpi	r24, 0x05	; 5
  de:	91 05       	cpc	r25, r1
  e0:	34 f3       	brlt	.-52     	; 0xae <main+0x42>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	17 c0       	rjmp	.+46     	; 0x116 <main+0xaa>
			PORTB = 0x0F;
			_delay_ms(1000);	
		}
		
		for(int i = 0 ; i < 5 ; i++) {
			PORTB = 0xCC ;
  e8:	2c ec       	ldi	r18, 0xCC	; 204
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	2f e3       	ldi	r18, 0x3F	; 63
  ee:	3d e0       	ldi	r19, 0x0D	; 13
  f0:	43 e0       	ldi	r20, 0x03	; 3
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x86>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x90>
  fc:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x33;
  fe:	23 e3       	ldi	r18, 0x33	; 51
 100:	28 bb       	out	0x18, r18	; 24
 102:	2f e3       	ldi	r18, 0x3F	; 63
 104:	3d e0       	ldi	r19, 0x0D	; 13
 106:	43 e0       	ldi	r20, 0x03	; 3
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x9c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x0F;
			_delay_ms(1000);	
		}
		
		for(int i = 0 ; i < 5 ; i++) {
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	85 30       	cpi	r24, 0x05	; 5
 118:	91 05       	cpc	r25, r1
 11a:	34 f3       	brlt	.-52     	; 0xe8 <main+0x7c>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	17 c0       	rjmp	.+46     	; 0x150 <main+0xe4>
			PORTB = 0x33;
			_delay_ms(1000);
		}
		
		for(int i = 0 ; i < 5 ; i++) {
			PORTB = 0xAA ;
 122:	2a ea       	ldi	r18, 0xAA	; 170
 124:	28 bb       	out	0x18, r18	; 24
 126:	2f e3       	ldi	r18, 0x3F	; 63
 128:	3d e0       	ldi	r19, 0x0D	; 13
 12a:	43 e0       	ldi	r20, 0x03	; 3
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	40 40       	sbci	r20, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xc0>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xca>
 136:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x55;
 138:	25 e5       	ldi	r18, 0x55	; 85
 13a:	28 bb       	out	0x18, r18	; 24
 13c:	2f e3       	ldi	r18, 0x3F	; 63
 13e:	3d e0       	ldi	r19, 0x0D	; 13
 140:	43 e0       	ldi	r20, 0x03	; 3
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	40 40       	sbci	r20, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0xd6>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xe0>
 14c:	00 00       	nop
			_delay_ms(1000);
			PORTB = 0x33;
			_delay_ms(1000);
		}
		
		for(int i = 0 ; i < 5 ; i++) {
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	85 30       	cpi	r24, 0x05	; 5
 152:	91 05       	cpc	r25, r1
 154:	34 f3       	brlt	.-52     	; 0x122 <main+0xb6>
			_delay_ms(1000);
			PORTB = 0x55;
			_delay_ms(1000);
		}
		
		PORTB = 0x80;
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	88 bb       	out	0x18, r24	; 24
		for(int i = 0 ; i < 7 ; i++) {
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	13 c0       	rjmp	.+38     	; 0x186 <main+0x11a>
			PORTB = 1<<i;
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	08 2e       	mov	r0, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0x100>
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <main+0xfc>
 170:	28 bb       	out	0x18, r18	; 24
 172:	2f e3       	ldi	r18, 0x3F	; 63
 174:	3d e0       	ldi	r19, 0x0D	; 13
 176:	43 e0       	ldi	r20, 0x03	; 3
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	30 40       	sbci	r19, 0x00	; 0
 17c:	40 40       	sbci	r20, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x10c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x116>
 182:	00 00       	nop
			PORTB = 0x55;
			_delay_ms(1000);
		}
		
		PORTB = 0x80;
		for(int i = 0 ; i < 7 ; i++) {
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	87 30       	cpi	r24, 0x07	; 7
 188:	91 05       	cpc	r25, r1
 18a:	54 f3       	brlt	.-44     	; 0x160 <main+0xf4>
 18c:	71 cf       	rjmp	.-286    	; 0x70 <main+0x4>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
