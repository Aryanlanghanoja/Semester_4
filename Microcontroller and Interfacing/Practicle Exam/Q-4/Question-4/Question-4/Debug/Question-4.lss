
Question-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000003ca  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf7  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00001207  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058e  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e7  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000029fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  7a:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:
#define RS 5

unsigned char keypad();

void lcdcmd(unsigned char cmd) {
	PORTD &= ~(1 << RS);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 7d       	andi	r25, 0xDF	; 223
  86:	92 bb       	out	0x12, r25	; 18
	PORTD &= ~(1 << RW);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9f 7b       	andi	r25, 0xBF	; 191
  8c:	92 bb       	out	0x12, r25	; 18
	LCD = cmd & 0xF0;
  8e:	98 2f       	mov	r25, r24
  90:	90 7f       	andi	r25, 0xF0	; 240
  92:	98 bb       	out	0x18, r25	; 24
	PORTD |= (1 << EN);
  94:	92 b3       	in	r25, 0x12	; 18
  96:	90 68       	ori	r25, 0x80	; 128
  98:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	e3 ec       	ldi	r30, 0xC3	; 195
  9c:	f9 e0       	ldi	r31, 0x09	; 9
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcdcmd+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcdcmd+0x22>
  a4:	00 00       	nop
	_delay_ms(10);
	PORTD &= ~(1 << EN);
  a6:	92 b3       	in	r25, 0x12	; 18
  a8:	9f 77       	andi	r25, 0x7F	; 127
  aa:	92 bb       	out	0x12, r25	; 18
	LCD = cmd << 4;
  ac:	82 95       	swap	r24
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	88 bb       	out	0x18, r24	; 24
	PORTD |= (1 << EN);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	89 ef       	ldi	r24, 0xF9	; 249
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdcmd+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcdcmd+0x40>
  c2:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << EN);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <lcddata>:
}

void lcddata(unsigned char data) {
	PORTD |= (1 << RS);
  cc:	92 b3       	in	r25, 0x12	; 18
  ce:	90 62       	ori	r25, 0x20	; 32
  d0:	92 bb       	out	0x12, r25	; 18
	PORTD &= ~(1 << RW);
  d2:	92 b3       	in	r25, 0x12	; 18
  d4:	9f 7b       	andi	r25, 0xBF	; 191
  d6:	92 bb       	out	0x12, r25	; 18
	LCD = data & 0xF0;
  d8:	98 2f       	mov	r25, r24
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	98 bb       	out	0x18, r25	; 24
	PORTD |= (1 << EN);
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	90 68       	ori	r25, 0x80	; 128
  e2:	92 bb       	out	0x12, r25	; 18
  e4:	e3 ec       	ldi	r30, 0xC3	; 195
  e6:	f9 e0       	ldi	r31, 0x09	; 9
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcddata+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcddata+0x22>
  ee:	00 00       	nop
	_delay_ms(10);
	PORTD &= ~(1 << EN);
  f0:	92 b3       	in	r25, 0x12	; 18
  f2:	9f 77       	andi	r25, 0x7F	; 127
  f4:	92 bb       	out	0x12, r25	; 18
	LCD = data << 4;
  f6:	82 95       	swap	r24
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	88 bb       	out	0x18, r24	; 24
	PORTD |= (1 << EN);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	82 bb       	out	0x12, r24	; 18
 102:	89 ef       	ldi	r24, 0xF9	; 249
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcddata+0x3a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcddata+0x40>
 10c:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~(1 << EN);
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	8f 77       	andi	r24, 0x7F	; 127
 112:	82 bb       	out	0x12, r24	; 18
 114:	08 95       	ret

00000116 <lcd_init>:
}

void lcd_init() {
	DDRA = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
 11a:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1 << EN);
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	82 bb       	out	0x12, r24	; 18
	lcdcmd(0x33);
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x32);
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x28);
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x0E);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 140:	83 ef       	ldi	r24, 0xF3	; 243
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init+0x2e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_init+0x34>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <keypad>:
	_delay_ms(2);
}

unsigned char keypad() {
	PORTC = 0b11111110;
 14e:	8e ef       	ldi	r24, 0xFE	; 254
 150:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1 << PINC4)) == 0) {
 152:	9c 99       	sbic	0x13, 4	; 19
 154:	08 c0       	rjmp	.+16     	; 0x166 <keypad+0x18>
 156:	81 e1       	ldi	r24, 0x11	; 17
 158:	9a e7       	ldi	r25, 0x7A	; 122
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <keypad+0xc>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <keypad+0x12>
 160:	00 00       	nop
		_delay_ms(125);
		return '7';
 162:	87 e3       	ldi	r24, 0x37	; 55
 164:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0) {
 166:	9d 99       	sbic	0x13, 5	; 19
 168:	08 c0       	rjmp	.+16     	; 0x17a <keypad+0x2c>
 16a:	81 e1       	ldi	r24, 0x11	; 17
 16c:	9a e7       	ldi	r25, 0x7A	; 122
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <keypad+0x20>
 172:	00 c0       	rjmp	.+0      	; 0x174 <keypad+0x26>
 174:	00 00       	nop
		_delay_ms(125);
		return '8';
 176:	88 e3       	ldi	r24, 0x38	; 56
 178:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0) {
 17a:	9e 99       	sbic	0x13, 6	; 19
 17c:	08 c0       	rjmp	.+16     	; 0x18e <keypad+0x40>
 17e:	81 e1       	ldi	r24, 0x11	; 17
 180:	9a e7       	ldi	r25, 0x7A	; 122
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <keypad+0x34>
 186:	00 c0       	rjmp	.+0      	; 0x188 <keypad+0x3a>
 188:	00 00       	nop
		_delay_ms(125);
		return '9';
 18a:	89 e3       	ldi	r24, 0x39	; 57
 18c:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0) {
 18e:	9f 99       	sbic	0x13, 7	; 19
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <keypad+0x54>
 192:	81 e1       	ldi	r24, 0x11	; 17
 194:	9a e7       	ldi	r25, 0x7A	; 122
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <keypad+0x48>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <keypad+0x4e>
 19c:	00 00       	nop
		_delay_ms(125);
		return '/';
 19e:	8f e2       	ldi	r24, 0x2F	; 47
 1a0:	08 95       	ret
	}
	PORTC = 0b11111101;
 1a2:	8d ef       	ldi	r24, 0xFD	; 253
 1a4:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1 << PINC4)) == 0) {
 1a6:	9c 99       	sbic	0x13, 4	; 19
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <keypad+0x6c>
 1aa:	81 e1       	ldi	r24, 0x11	; 17
 1ac:	9a e7       	ldi	r25, 0x7A	; 122
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <keypad+0x60>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <keypad+0x66>
 1b4:	00 00       	nop
		_delay_ms(125);
		return '4';
 1b6:	84 e3       	ldi	r24, 0x34	; 52
 1b8:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0) {
 1ba:	9d 99       	sbic	0x13, 5	; 19
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <keypad+0x80>
 1be:	81 e1       	ldi	r24, 0x11	; 17
 1c0:	9a e7       	ldi	r25, 0x7A	; 122
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <keypad+0x74>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <keypad+0x7a>
 1c8:	00 00       	nop
		_delay_ms(125);
		return '5';
 1ca:	85 e3       	ldi	r24, 0x35	; 53
 1cc:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0) {
 1ce:	9e 99       	sbic	0x13, 6	; 19
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <keypad+0x94>
 1d2:	81 e1       	ldi	r24, 0x11	; 17
 1d4:	9a e7       	ldi	r25, 0x7A	; 122
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <keypad+0x88>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <keypad+0x8e>
 1dc:	00 00       	nop
		_delay_ms(125);
		return '6';
 1de:	86 e3       	ldi	r24, 0x36	; 54
 1e0:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0) {
 1e2:	9f 99       	sbic	0x13, 7	; 19
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <keypad+0xa8>
 1e6:	81 e1       	ldi	r24, 0x11	; 17
 1e8:	9a e7       	ldi	r25, 0x7A	; 122
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <keypad+0x9c>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <keypad+0xa2>
 1f0:	00 00       	nop
		_delay_ms(125);
		return '*';
 1f2:	8a e2       	ldi	r24, 0x2A	; 42
 1f4:	08 95       	ret
	}
	PORTC = 0b11111011;
 1f6:	8b ef       	ldi	r24, 0xFB	; 251
 1f8:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1 << PINC4)) == 0) {
 1fa:	9c 99       	sbic	0x13, 4	; 19
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <keypad+0xc0>
 1fe:	81 e1       	ldi	r24, 0x11	; 17
 200:	9a e7       	ldi	r25, 0x7A	; 122
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <keypad+0xb4>
 206:	00 c0       	rjmp	.+0      	; 0x208 <keypad+0xba>
 208:	00 00       	nop
		_delay_ms(125);
		return '1';
 20a:	81 e3       	ldi	r24, 0x31	; 49
 20c:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0) {
 20e:	9d 99       	sbic	0x13, 5	; 19
 210:	08 c0       	rjmp	.+16     	; 0x222 <keypad+0xd4>
 212:	81 e1       	ldi	r24, 0x11	; 17
 214:	9a e7       	ldi	r25, 0x7A	; 122
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <keypad+0xc8>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <keypad+0xce>
 21c:	00 00       	nop
		_delay_ms(125);
		return '2';
 21e:	82 e3       	ldi	r24, 0x32	; 50
 220:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0) {
 222:	9e 99       	sbic	0x13, 6	; 19
 224:	08 c0       	rjmp	.+16     	; 0x236 <keypad+0xe8>
 226:	81 e1       	ldi	r24, 0x11	; 17
 228:	9a e7       	ldi	r25, 0x7A	; 122
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <keypad+0xdc>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <keypad+0xe2>
 230:	00 00       	nop
		_delay_ms(125);
		return '3';
 232:	83 e3       	ldi	r24, 0x33	; 51
 234:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0) {
 236:	9f 99       	sbic	0x13, 7	; 19
 238:	08 c0       	rjmp	.+16     	; 0x24a <keypad+0xfc>
 23a:	85 ee       	ldi	r24, 0xE5	; 229
 23c:	9a ea       	ldi	r25, 0xAA	; 170
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <keypad+0xf0>
 242:	00 c0       	rjmp	.+0      	; 0x244 <keypad+0xf6>
 244:	00 00       	nop
		_delay_ms(175);
		return '-';
 246:	8d e2       	ldi	r24, 0x2D	; 45
 248:	08 95       	ret
	}
	PORTC = 0b11110111;
 24a:	87 ef       	ldi	r24, 0xF7	; 247
 24c:	85 bb       	out	0x15, r24	; 21
	if ((PINC & (1 << PINC4)) == 0) {
 24e:	9c 99       	sbic	0x13, 4	; 19
 250:	08 c0       	rjmp	.+16     	; 0x262 <keypad+0x114>
 252:	81 e1       	ldi	r24, 0x11	; 17
 254:	9a e7       	ldi	r25, 0x7A	; 122
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <keypad+0x108>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <keypad+0x10e>
 25c:	00 00       	nop
		_delay_ms(125);
		return 'C';
 25e:	83 e4       	ldi	r24, 0x43	; 67
 260:	08 95       	ret
	}
	else if ((PINC & (1 << PINC5)) == 0) {
 262:	9d 99       	sbic	0x13, 5	; 19
 264:	08 c0       	rjmp	.+16     	; 0x276 <keypad+0x128>
 266:	81 e1       	ldi	r24, 0x11	; 17
 268:	9a e7       	ldi	r25, 0x7A	; 122
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <keypad+0x11c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <keypad+0x122>
 270:	00 00       	nop
		_delay_ms(125);
		return '0';
 272:	80 e3       	ldi	r24, 0x30	; 48
 274:	08 95       	ret
	}
	else if ((PINC & (1 << PINC6)) == 0) {
 276:	9e 99       	sbic	0x13, 6	; 19
 278:	08 c0       	rjmp	.+16     	; 0x28a <keypad+0x13c>
 27a:	81 e1       	ldi	r24, 0x11	; 17
 27c:	9a e7       	ldi	r25, 0x7A	; 122
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <keypad+0x130>
 282:	00 c0       	rjmp	.+0      	; 0x284 <keypad+0x136>
 284:	00 00       	nop
		_delay_ms(125);
		return '=';
 286:	8d e3       	ldi	r24, 0x3D	; 61
 288:	08 95       	ret
	}
	else if ((PINC & (1 << PINC7)) == 0) {
 28a:	9f 99       	sbic	0x13, 7	; 19
 28c:	08 c0       	rjmp	.+16     	; 0x29e <keypad+0x150>
 28e:	81 e1       	ldi	r24, 0x11	; 17
 290:	9a e7       	ldi	r25, 0x7A	; 122
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <keypad+0x144>
 296:	00 c0       	rjmp	.+0      	; 0x298 <keypad+0x14a>
 298:	00 00       	nop
		_delay_ms(125);
		return '+';
 29a:	8b e2       	ldi	r24, 0x2B	; 43
 29c:	08 95       	ret
	}
	return 0;
 29e:	80 e0       	ldi	r24, 0x00	; 0
}
 2a0:	08 95       	ret

000002a2 <main>:

int main(void) {
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	67 97       	sbiw	r28, 0x17	; 23
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
	unsigned char x;
	DDRC = 0x0F;
 2c0:	8f e0       	ldi	r24, 0x0F	; 15
 2c2:	84 bb       	out	0x14, r24	; 20
 2c4:	89 ef       	ldi	r24, 0xF9	; 249
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0x26>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x2c>
 2ce:	00 00       	nop
	_delay_ms(1);
	PORTC = 0xF0;
 2d0:	10 ef       	ldi	r17, 0xF0	; 240
 2d2:	15 bb       	out	0x15, r17	; 21
	lcd_init();
 2d4:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_init>
	PORTC = 0xF0;
 2d8:	15 bb       	out	0x15, r17	; 21
 2da:	89 e6       	ldi	r24, 0x69	; 105
 2dc:	98 e1       	ldi	r25, 0x18	; 24
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x3c>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x42>
 2e4:	00 00       	nop
	_delay_ms(25);
	if (PINC != 0xF0) {
 2e6:	83 b3       	in	r24, 0x13	; 19
 2e8:	80 3f       	cpi	r24, 0xF0	; 240
 2ea:	09 f4       	brne	.+2      	; 0x2ee <main+0x4c>
 2ec:	5c c0       	rjmp	.+184    	; 0x3a6 <main+0x104>
		char password[4] = "123x";
 2ee:	81 e3       	ldi	r24, 0x31	; 49
 2f0:	92 e3       	ldi	r25, 0x32	; 50
 2f2:	9d 8b       	std	Y+21, r25	; 0x15
 2f4:	8c 8b       	std	Y+20, r24	; 0x14
 2f6:	83 e3       	ldi	r24, 0x33	; 51
 2f8:	98 e7       	ldi	r25, 0x78	; 120
 2fa:	9f 8b       	std	Y+23, r25	; 0x17
 2fc:	8e 8b       	std	Y+22, r24	; 0x16
		int correct = 0;

		for (int i = 0; i < 4; i++) {
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	10 e0       	ldi	r17, 0x00	; 0
	lcd_init();
	PORTC = 0xF0;
	_delay_ms(25);
	if (PINC != 0xF0) {
		char password[4] = "123x";
		int correct = 0;
 302:	c1 2c       	mov	r12, r1
 304:	d1 2c       	mov	r13, r1

		for (int i = 0; i < 4; i++) {
 306:	13 c0       	rjmp	.+38     	; 0x32e <main+0x8c>
			x = keypad();
 308:	0e 94 a7 00 	call	0x14e	; 0x14e <keypad>
 30c:	f8 2e       	mov	r15, r24
			lcddata(x);
 30e:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>

			if (x == password[i]) {
 312:	e4 e1       	ldi	r30, 0x14	; 20
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ec 0f       	add	r30, r28
 318:	fd 1f       	adc	r31, r29
 31a:	e0 0f       	add	r30, r16
 31c:	f1 1f       	adc	r31, r17
 31e:	80 81       	ld	r24, Z
 320:	f8 12       	cpse	r15, r24
 322:	03 c0       	rjmp	.+6      	; 0x32a <main+0x88>
				correct++;
 324:	9f ef       	ldi	r25, 0xFF	; 255
 326:	c9 1a       	sub	r12, r25
 328:	d9 0a       	sbc	r13, r25
	_delay_ms(25);
	if (PINC != 0xF0) {
		char password[4] = "123x";
		int correct = 0;

		for (int i = 0; i < 4; i++) {
 32a:	0f 5f       	subi	r16, 0xFF	; 255
 32c:	1f 4f       	sbci	r17, 0xFF	; 255
 32e:	04 30       	cpi	r16, 0x04	; 4
 330:	11 05       	cpc	r17, r1
 332:	54 f3       	brlt	.-44     	; 0x308 <main+0x66>
			if (x == password[i]) {
				correct++;
			}
		}

		if (correct == 4) {
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	c8 16       	cp	r12, r24
 338:	d1 04       	cpc	r13, r1
 33a:	d9 f4       	brne	.+54     	; 0x372 <main+0xd0>
			char output[] = "Correct Password";
 33c:	81 e1       	ldi	r24, 0x11	; 17
 33e:	e0 e6       	ldi	r30, 0x60	; 96
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	de 01       	movw	r26, r28
 344:	11 96       	adiw	r26, 0x01	; 1
 346:	01 90       	ld	r0, Z+
 348:	0d 92       	st	X+, r0
 34a:	8a 95       	dec	r24
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0xa4>

			for (int i = 0; i < sizeof(output) / sizeof(output[0]); i++) {
 34e:	00 e0       	ldi	r16, 0x00	; 0
 350:	10 e0       	ldi	r17, 0x00	; 0
 352:	0b c0       	rjmp	.+22     	; 0x36a <main+0xc8>
				lcddata(output[i]);
 354:	e1 e0       	ldi	r30, 0x01	; 1
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	ec 0f       	add	r30, r28
 35a:	fd 1f       	adc	r31, r29
 35c:	e0 0f       	add	r30, r16
 35e:	f1 1f       	adc	r31, r17
 360:	80 81       	ld	r24, Z
 362:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>
		}

		if (correct == 4) {
			char output[] = "Correct Password";

			for (int i = 0; i < sizeof(output) / sizeof(output[0]); i++) {
 366:	0f 5f       	subi	r16, 0xFF	; 255
 368:	1f 4f       	sbci	r17, 0xFF	; 255
 36a:	01 31       	cpi	r16, 0x11	; 17
 36c:	11 05       	cpc	r17, r1
 36e:	90 f3       	brcs	.-28     	; 0x354 <main+0xb2>
 370:	1a c0       	rjmp	.+52     	; 0x3a6 <main+0x104>
				lcddata(output[i]);
			}
		}
		else {
			char output[] = "Incorrect Password";
 372:	83 e1       	ldi	r24, 0x13	; 19
 374:	e1 e7       	ldi	r30, 0x71	; 113
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	de 01       	movw	r26, r28
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	01 90       	ld	r0, Z+
 37e:	0d 92       	st	X+, r0
 380:	8a 95       	dec	r24
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0xda>

			for (int i = 0; i < sizeof(output) / sizeof(output[0]); i++) {
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	0b c0       	rjmp	.+22     	; 0x3a0 <main+0xfe>
				lcddata(output[i]);
 38a:	e1 e0       	ldi	r30, 0x01	; 1
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	ec 0f       	add	r30, r28
 390:	fd 1f       	adc	r31, r29
 392:	e0 0f       	add	r30, r16
 394:	f1 1f       	adc	r31, r17
 396:	80 81       	ld	r24, Z
 398:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>
			}
		}
		else {
			char output[] = "Incorrect Password";

			for (int i = 0; i < sizeof(output) / sizeof(output[0]); i++) {
 39c:	0f 5f       	subi	r16, 0xFF	; 255
 39e:	1f 4f       	sbci	r17, 0xFF	; 255
 3a0:	03 31       	cpi	r16, 0x13	; 19
 3a2:	11 05       	cpc	r17, r1
 3a4:	90 f3       	brcs	.-28     	; 0x38a <main+0xe8>
			}
		}
	}

	return 0;
}
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	67 96       	adiw	r28, 0x17	; 23
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
